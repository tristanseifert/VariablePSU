
VariablePSU_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002010  000020a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800110  00800110  000020b4  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000089b  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000188  00000000  00000000  00005278  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029a1  00000000  00000000  00005400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  00007da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001774  00000000  00000000  00008906  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  0000a07c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063d  00000000  00000000  0000a554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000203b  00000000  00000000  0000ab91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a98  00000000  00000000  0000cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_5>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 e1       	ldi	r30, 0x10	; 16
      90:	f0 e2       	ldi	r31, 0x20	; 32
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 31       	cpi	r26, 0x10	; 16
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e1       	ldi	r26, 0x10	; 16
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 3a       	cpi	r26, 0xA5	; 165
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <main>
      b2:	0c 94 06 10 	jmp	0x200c	; 0x200c <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <ds1820_reset>:
//----------------------------------------
// Reset DS18S20
//----------------------------------------
uint8_t ds1820_reset(uint8_t used_pin) {
	uint8_t err=100;
	DS1820_DDR |= 1<<used_pin;						// define as ouput
      ba:	91 b1       	in	r25, 0x01	; 1
      bc:	21 e0       	ldi	r18, 0x01	; 1
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	08 2e       	mov	r0, r24
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <ds1820_reset+0xe>
      c4:	22 0f       	add	r18, r18
      c6:	33 1f       	adc	r19, r19
      c8:	0a 94       	dec	r0
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <ds1820_reset+0xa>
      cc:	92 2b       	or	r25, r18
      ce:	91 b9       	out	0x01, r25	; 1
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
      d0:	92 b1       	in	r25, 0x02	; 2
      d2:	52 2f       	mov	r21, r18
      d4:	50 95       	com	r21
      d6:	95 23       	and	r25, r21
      d8:	92 b9       	out	0x02, r25	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	90 ea       	ldi	r25, 0xA0	; 160
      dc:	9a 95       	dec	r25
      de:	f1 f7       	brne	.-4      	; 0xdc <ds1820_reset+0x22>
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	95 23       	and	r25, r21
      e4:	91 b9       	out	0x01, r25	; 1
	DS1820_PORT |= 1<<used_pin;						//Pullup on
      e6:	92 b1       	in	r25, 0x02	; 2
      e8:	92 2b       	or	r25, r18
      ea:	92 b9       	out	0x02, r25	; 2
      ec:	46 e1       	ldi	r20, 0x16	; 22
      ee:	4a 95       	dec	r20
      f0:	f1 f7       	brne	.-4      	; 0xee <ds1820_reset+0x34>
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
      f2:	90 b1       	in	r25, 0x00	; 0
      f4:	40 e5       	ldi	r20, 0x50	; 80
      f6:	4a 95       	dec	r20
      f8:	f1 f7       	brne	.-4      	; 0xf6 <ds1820_reset+0x3c>
	_delay_us(240);									// 240 us
	if((DS1820_PIN & (1<<used_pin)) == 0 ){			// short circuit --> err=2
      fa:	40 b1       	in	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	08 2e       	mov	r0, r24
     100:	02 c0       	rjmp	.+4      	; 0x106 <ds1820_reset+0x4c>
     102:	55 95       	asr	r21
     104:	47 95       	ror	r20
     106:	0a 94       	dec	r0
     108:	e2 f7       	brpl	.-8      	; 0x102 <ds1820_reset+0x48>
     10a:	40 fd       	sbrc	r20, 0
     10c:	02 c0       	rjmp	.+4      	; 0x112 <ds1820_reset+0x58>
		err = 2;
     10e:	82 e0       	ldi	r24, 0x02	; 2
	}

	return err;
}
     110:	08 95       	ret
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
	DS1820_PORT |= 1<<used_pin;						//Pullup on
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     112:	49 2f       	mov	r20, r25
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	42 23       	and	r20, r18
     118:	53 23       	and	r21, r19
     11a:	02 c0       	rjmp	.+4      	; 0x120 <ds1820_reset+0x66>
     11c:	55 95       	asr	r21
     11e:	47 95       	ror	r20
     120:	8a 95       	dec	r24
     122:	e2 f7       	brpl	.-8      	; 0x11c <ds1820_reset+0x62>
     124:	84 2f       	mov	r24, r20
     126:	08 95       	ret

00000128 <ds1820_wr_bit>:
}
//-----------------------------------------
// Write one bit to DS18S20
//-----------------------------------------
void ds1820_wr_bit(uint8_t wrbit,uint8_t used_pin) {
	if (wrbit ==0)	{
     128:	88 23       	and	r24, r24
     12a:	19 f0       	breq	.+6      	; 0x132 <ds1820_wr_bit+0xa>
		DS1820_DDR &= ~(1<<used_pin);				// define as input
	  	DS1820_PORT |= 1<<used_pin;					//Pullup on
		_delay_us(4);
	}
	
	if (wrbit ==1)	{
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	e1 f0       	breq	.+56     	; 0x168 <ds1820_wr_bit+0x40>
     130:	08 95       	ret
//-----------------------------------------
// Write one bit to DS18S20
//-----------------------------------------
void ds1820_wr_bit(uint8_t wrbit,uint8_t used_pin) {
	if (wrbit ==0)	{
		DS1820_DDR |= 1<<used_pin;					// define as ouput
     132:	21 b1       	in	r18, 0x01	; 1
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	02 c0       	rjmp	.+4      	; 0x13e <ds1820_wr_bit+0x16>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	6a 95       	dec	r22
     140:	e2 f7       	brpl	.-8      	; 0x13a <ds1820_wr_bit+0x12>
     142:	38 2f       	mov	r19, r24
     144:	28 2b       	or	r18, r24
     146:	21 b9       	out	0x01, r18	; 1
  		DS1820_PORT &= ~(1<<used_pin);				//Pull low
     148:	92 b1       	in	r25, 0x02	; 2
     14a:	80 95       	com	r24
     14c:	98 23       	and	r25, r24
     14e:	92 b9       	out	0x02, r25	; 2
     150:	94 e1       	ldi	r25, 0x14	; 20
     152:	9a 95       	dec	r25
     154:	f1 f7       	brne	.-4      	; 0x152 <ds1820_wr_bit+0x2a>
		_delay_us(60);
		DS1820_DDR &= ~(1<<used_pin);				// define as input
     156:	91 b1       	in	r25, 0x01	; 1
     158:	98 23       	and	r25, r24
     15a:	91 b9       	out	0x01, r25	; 1
	  	DS1820_PORT |= 1<<used_pin;					//Pullup on
     15c:	82 b1       	in	r24, 0x02	; 2
     15e:	83 2b       	or	r24, r19
     160:	82 b9       	out	0x02, r24	; 2
     162:	00 c0       	rjmp	.+0      	; 0x164 <ds1820_wr_bit+0x3c>
     164:	00 c0       	rjmp	.+0      	; 0x166 <ds1820_wr_bit+0x3e>
     166:	08 95       	ret
		_delay_us(4);
	}
	
	if (wrbit ==1)	{
		DS1820_DDR |= 1<<used_pin;					// define as ouput
     168:	21 b1       	in	r18, 0x01	; 1
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <ds1820_wr_bit+0x4c>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <ds1820_wr_bit+0x48>
     178:	38 2f       	mov	r19, r24
     17a:	28 2b       	or	r18, r24
     17c:	21 b9       	out	0x01, r18	; 1
  		DS1820_PORT &= ~(1<<used_pin);				//Pull low
     17e:	92 b1       	in	r25, 0x02	; 2
     180:	80 95       	com	r24
     182:	98 23       	and	r25, r24
     184:	92 b9       	out	0x02, r25	; 2
     186:	93 e0       	ldi	r25, 0x03	; 3
     188:	9a 95       	dec	r25
     18a:	f1 f7       	brne	.-4      	; 0x188 <ds1820_wr_bit+0x60>
     18c:	00 00       	nop
		_delay_us(10);
		DS1820_DDR &= ~(1<<used_pin);				// define as input
     18e:	91 b1       	in	r25, 0x01	; 1
     190:	98 23       	and	r25, r24
     192:	91 b9       	out	0x01, r25	; 1
	  	DS1820_PORT |= 1<<used_pin;					//Pullup on
     194:	82 b1       	in	r24, 0x02	; 2
     196:	83 2b       	or	r24, r19
     198:	82 b9       	out	0x02, r24	; 2
     19a:	82 e1       	ldi	r24, 0x12	; 18
     19c:	8a 95       	dec	r24
     19e:	f1 f7       	brne	.-4      	; 0x19c <ds1820_wr_bit+0x74>
     1a0:	08 95       	ret

000001a2 <ds1820_re_bit>:
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     1a2:	91 b1       	in	r25, 0x01	; 1
     1a4:	41 e0       	ldi	r20, 0x01	; 1
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	08 2e       	mov	r0, r24
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <ds1820_re_bit+0xe>
     1ac:	44 0f       	add	r20, r20
     1ae:	55 1f       	adc	r21, r21
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <ds1820_re_bit+0xa>
     1b4:	94 2b       	or	r25, r20
     1b6:	91 b9       	out	0x01, r25	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     1b8:	92 b1       	in	r25, 0x02	; 2
     1ba:	34 2f       	mov	r19, r20
     1bc:	30 95       	com	r19
     1be:	93 23       	and	r25, r19
     1c0:	92 b9       	out	0x02, r25	; 2
     1c2:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     1c4:	91 b1       	in	r25, 0x01	; 1
     1c6:	93 23       	and	r25, r19
     1c8:	91 b9       	out	0x01, r25	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     1ca:	92 b1       	in	r25, 0x02	; 2
     1cc:	94 2b       	or	r25, r20
     1ce:	92 b9       	out	0x02, r25	; 2
     1d0:	93 e0       	ldi	r25, 0x03	; 3
     1d2:	9a 95       	dec	r25
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <ds1820_re_bit+0x30>
     1d6:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     1d8:	20 b1       	in	r18, 0x00	; 0
     1da:	90 e1       	ldi	r25, 0x10	; 16
     1dc:	9a 95       	dec	r25
     1de:	f1 f7       	brne	.-4      	; 0x1dc <ds1820_re_bit+0x3a>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <ds1820_re_bit+0x40>
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	24 23       	and	r18, r20
     1e6:	35 23       	and	r19, r21
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <ds1820_re_bit+0x4c>
     1ea:	35 95       	asr	r19
     1ec:	27 95       	ror	r18
     1ee:	8a 95       	dec	r24
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <ds1820_re_bit+0x48>
	_delay_us(50);
	return rebit;								
}
     1f2:	82 2f       	mov	r24, r18
     1f4:	08 95       	ret

000001f6 <ds1820_re_byte>:
//-----------------------------------------
// Read 1 byte from DS18S20
//-----------------------------------------
uint8_t ds1820_re_byte(uint8_t used_pin) {
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	08 2e       	mov	r0, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <ds1820_re_byte+0xc>
     1fe:	66 0f       	add	r22, r22
     200:	77 1f       	adc	r23, r23
     202:	0a 94       	dec	r0
     204:	e2 f7       	brpl	.-8      	; 0x1fe <ds1820_re_byte+0x8>
     206:	96 2f       	mov	r25, r22
     208:	56 2f       	mov	r21, r22
     20a:	50 95       	com	r21
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     20c:	21 b1       	in	r18, 0x01	; 1
     20e:	26 2b       	or	r18, r22
     210:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     212:	22 b1       	in	r18, 0x02	; 2
     214:	25 23       	and	r18, r21
     216:	22 b9       	out	0x02, r18	; 2
     218:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     21a:	21 b1       	in	r18, 0x01	; 1
     21c:	25 23       	and	r18, r21
     21e:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     220:	22 b1       	in	r18, 0x02	; 2
     222:	26 2b       	or	r18, r22
     224:	22 b9       	out	0x02, r18	; 2
     226:	23 e0       	ldi	r18, 0x03	; 3
     228:	2a 95       	dec	r18
     22a:	f1 f7       	brne	.-4      	; 0x228 <ds1820_re_byte+0x32>
     22c:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     22e:	20 b1       	in	r18, 0x00	; 0
     230:	30 e1       	ldi	r19, 0x10	; 16
     232:	3a 95       	dec	r19
     234:	f1 f7       	brne	.-4      	; 0x232 <ds1820_re_byte+0x3c>
     236:	00 c0       	rjmp	.+0      	; 0x238 <ds1820_re_byte+0x42>
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	26 23       	and	r18, r22
     23c:	37 23       	and	r19, r23
     23e:	08 2e       	mov	r0, r24
     240:	02 c0       	rjmp	.+4      	; 0x246 <ds1820_re_byte+0x50>
     242:	35 95       	asr	r19
     244:	27 95       	ror	r18
     246:	0a 94       	dec	r0
     248:	e2 f7       	brpl	.-8      	; 0x242 <ds1820_re_byte+0x4c>
	return rebit;								
}
//-----------------------------------------
// Read 1 byte from DS18S20
//-----------------------------------------
uint8_t ds1820_re_byte(uint8_t used_pin) {
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	21 30       	cpi	r18, 0x01	; 1
     24e:	09 f0       	breq	.+2      	; 0x252 <ds1820_re_byte+0x5c>
     250:	40 e0       	ldi	r20, 0x00	; 0
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     252:	21 b1       	in	r18, 0x01	; 1
     254:	29 2b       	or	r18, r25
     256:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     258:	22 b1       	in	r18, 0x02	; 2
     25a:	25 23       	and	r18, r21
     25c:	22 b9       	out	0x02, r18	; 2
     25e:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     260:	21 b1       	in	r18, 0x01	; 1
     262:	25 23       	and	r18, r21
     264:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     266:	22 b1       	in	r18, 0x02	; 2
     268:	29 2b       	or	r18, r25
     26a:	22 b9       	out	0x02, r18	; 2
     26c:	23 e0       	ldi	r18, 0x03	; 3
     26e:	2a 95       	dec	r18
     270:	f1 f7       	brne	.-4      	; 0x26e <ds1820_re_byte+0x78>
     272:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     274:	20 b1       	in	r18, 0x00	; 0
     276:	30 e1       	ldi	r19, 0x10	; 16
     278:	3a 95       	dec	r19
     27a:	f1 f7       	brne	.-4      	; 0x278 <ds1820_re_byte+0x82>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <ds1820_re_byte+0x88>
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	26 23       	and	r18, r22
     282:	37 23       	and	r19, r23
     284:	08 2e       	mov	r0, r24
     286:	02 c0       	rjmp	.+4      	; 0x28c <ds1820_re_byte+0x96>
     288:	35 95       	asr	r19
     28a:	27 95       	ror	r18
     28c:	0a 94       	dec	r0
     28e:	e2 f7       	brpl	.-8      	; 0x288 <ds1820_re_byte+0x92>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     290:	21 30       	cpi	r18, 0x01	; 1
     292:	09 f4       	brne	.+2      	; 0x296 <ds1820_re_byte+0xa0>
     294:	cb c0       	rjmp	.+406    	; 0x42c <ds1820_re_byte+0x236>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     296:	21 b1       	in	r18, 0x01	; 1
     298:	29 2b       	or	r18, r25
     29a:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     29c:	22 b1       	in	r18, 0x02	; 2
     29e:	25 23       	and	r18, r21
     2a0:	22 b9       	out	0x02, r18	; 2
     2a2:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     2a4:	21 b1       	in	r18, 0x01	; 1
     2a6:	25 23       	and	r18, r21
     2a8:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     2aa:	22 b1       	in	r18, 0x02	; 2
     2ac:	29 2b       	or	r18, r25
     2ae:	22 b9       	out	0x02, r18	; 2
     2b0:	23 e0       	ldi	r18, 0x03	; 3
     2b2:	2a 95       	dec	r18
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <ds1820_re_byte+0xbc>
     2b6:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     2b8:	20 b1       	in	r18, 0x00	; 0
     2ba:	30 e1       	ldi	r19, 0x10	; 16
     2bc:	3a 95       	dec	r19
     2be:	f1 f7       	brne	.-4      	; 0x2bc <ds1820_re_byte+0xc6>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <ds1820_re_byte+0xcc>
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	26 23       	and	r18, r22
     2c6:	37 23       	and	r19, r23
     2c8:	08 2e       	mov	r0, r24
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <ds1820_re_byte+0xda>
     2cc:	35 95       	asr	r19
     2ce:	27 95       	ror	r18
     2d0:	0a 94       	dec	r0
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <ds1820_re_byte+0xd6>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     2d4:	21 30       	cpi	r18, 0x01	; 1
     2d6:	09 f4       	brne	.+2      	; 0x2da <ds1820_re_byte+0xe4>
     2d8:	b6 c0       	rjmp	.+364    	; 0x446 <ds1820_re_byte+0x250>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     2da:	21 b1       	in	r18, 0x01	; 1
     2dc:	29 2b       	or	r18, r25
     2de:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     2e0:	22 b1       	in	r18, 0x02	; 2
     2e2:	25 23       	and	r18, r21
     2e4:	22 b9       	out	0x02, r18	; 2
     2e6:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     2e8:	21 b1       	in	r18, 0x01	; 1
     2ea:	25 23       	and	r18, r21
     2ec:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     2ee:	22 b1       	in	r18, 0x02	; 2
     2f0:	29 2b       	or	r18, r25
     2f2:	22 b9       	out	0x02, r18	; 2
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	2a 95       	dec	r18
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <ds1820_re_byte+0x100>
     2fa:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     2fc:	20 b1       	in	r18, 0x00	; 0
     2fe:	30 e1       	ldi	r19, 0x10	; 16
     300:	3a 95       	dec	r19
     302:	f1 f7       	brne	.-4      	; 0x300 <ds1820_re_byte+0x10a>
     304:	00 c0       	rjmp	.+0      	; 0x306 <ds1820_re_byte+0x110>
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	26 23       	and	r18, r22
     30a:	37 23       	and	r19, r23
     30c:	08 2e       	mov	r0, r24
     30e:	02 c0       	rjmp	.+4      	; 0x314 <ds1820_re_byte+0x11e>
     310:	35 95       	asr	r19
     312:	27 95       	ror	r18
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <ds1820_re_byte+0x11a>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     318:	21 30       	cpi	r18, 0x01	; 1
     31a:	09 f4       	brne	.+2      	; 0x31e <ds1820_re_byte+0x128>
     31c:	92 c0       	rjmp	.+292    	; 0x442 <ds1820_re_byte+0x24c>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     31e:	21 b1       	in	r18, 0x01	; 1
     320:	29 2b       	or	r18, r25
     322:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     324:	22 b1       	in	r18, 0x02	; 2
     326:	25 23       	and	r18, r21
     328:	22 b9       	out	0x02, r18	; 2
     32a:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     32c:	21 b1       	in	r18, 0x01	; 1
     32e:	25 23       	and	r18, r21
     330:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     332:	22 b1       	in	r18, 0x02	; 2
     334:	29 2b       	or	r18, r25
     336:	22 b9       	out	0x02, r18	; 2
     338:	23 e0       	ldi	r18, 0x03	; 3
     33a:	2a 95       	dec	r18
     33c:	f1 f7       	brne	.-4      	; 0x33a <ds1820_re_byte+0x144>
     33e:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     340:	20 b1       	in	r18, 0x00	; 0
     342:	30 e1       	ldi	r19, 0x10	; 16
     344:	3a 95       	dec	r19
     346:	f1 f7       	brne	.-4      	; 0x344 <ds1820_re_byte+0x14e>
     348:	00 c0       	rjmp	.+0      	; 0x34a <ds1820_re_byte+0x154>
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	26 23       	and	r18, r22
     34e:	37 23       	and	r19, r23
     350:	08 2e       	mov	r0, r24
     352:	02 c0       	rjmp	.+4      	; 0x358 <ds1820_re_byte+0x162>
     354:	35 95       	asr	r19
     356:	27 95       	ror	r18
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <ds1820_re_byte+0x15e>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     35c:	21 30       	cpi	r18, 0x01	; 1
     35e:	09 f4       	brne	.+2      	; 0x362 <ds1820_re_byte+0x16c>
     360:	6e c0       	rjmp	.+220    	; 0x43e <ds1820_re_byte+0x248>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     362:	21 b1       	in	r18, 0x01	; 1
     364:	29 2b       	or	r18, r25
     366:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     368:	22 b1       	in	r18, 0x02	; 2
     36a:	25 23       	and	r18, r21
     36c:	22 b9       	out	0x02, r18	; 2
     36e:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     370:	21 b1       	in	r18, 0x01	; 1
     372:	25 23       	and	r18, r21
     374:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     376:	22 b1       	in	r18, 0x02	; 2
     378:	29 2b       	or	r18, r25
     37a:	22 b9       	out	0x02, r18	; 2
     37c:	23 e0       	ldi	r18, 0x03	; 3
     37e:	2a 95       	dec	r18
     380:	f1 f7       	brne	.-4      	; 0x37e <ds1820_re_byte+0x188>
     382:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     384:	20 b1       	in	r18, 0x00	; 0
     386:	30 e1       	ldi	r19, 0x10	; 16
     388:	3a 95       	dec	r19
     38a:	f1 f7       	brne	.-4      	; 0x388 <ds1820_re_byte+0x192>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <ds1820_re_byte+0x198>
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	26 23       	and	r18, r22
     392:	37 23       	and	r19, r23
     394:	08 2e       	mov	r0, r24
     396:	02 c0       	rjmp	.+4      	; 0x39c <ds1820_re_byte+0x1a6>
     398:	35 95       	asr	r19
     39a:	27 95       	ror	r18
     39c:	0a 94       	dec	r0
     39e:	e2 f7       	brpl	.-8      	; 0x398 <ds1820_re_byte+0x1a2>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     3a0:	21 30       	cpi	r18, 0x01	; 1
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <ds1820_re_byte+0x1b0>
     3a4:	4a c0       	rjmp	.+148    	; 0x43a <ds1820_re_byte+0x244>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     3a6:	21 b1       	in	r18, 0x01	; 1
     3a8:	29 2b       	or	r18, r25
     3aa:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     3ac:	22 b1       	in	r18, 0x02	; 2
     3ae:	25 23       	and	r18, r21
     3b0:	22 b9       	out	0x02, r18	; 2
     3b2:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     3b4:	21 b1       	in	r18, 0x01	; 1
     3b6:	25 23       	and	r18, r21
     3b8:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     3ba:	22 b1       	in	r18, 0x02	; 2
     3bc:	29 2b       	or	r18, r25
     3be:	22 b9       	out	0x02, r18	; 2
     3c0:	23 e0       	ldi	r18, 0x03	; 3
     3c2:	2a 95       	dec	r18
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <ds1820_re_byte+0x1cc>
     3c6:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     3c8:	20 b1       	in	r18, 0x00	; 0
     3ca:	30 e1       	ldi	r19, 0x10	; 16
     3cc:	3a 95       	dec	r19
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <ds1820_re_byte+0x1d6>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <ds1820_re_byte+0x1dc>
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	26 23       	and	r18, r22
     3d6:	37 23       	and	r19, r23
     3d8:	08 2e       	mov	r0, r24
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <ds1820_re_byte+0x1ea>
     3dc:	35 95       	asr	r19
     3de:	27 95       	ror	r18
     3e0:	0a 94       	dec	r0
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <ds1820_re_byte+0x1e6>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     3e4:	21 30       	cpi	r18, 0x01	; 1
     3e6:	39 f1       	breq	.+78     	; 0x436 <ds1820_re_byte+0x240>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     3e8:	21 b1       	in	r18, 0x01	; 1
     3ea:	29 2b       	or	r18, r25
     3ec:	21 b9       	out	0x01, r18	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     3ee:	22 b1       	in	r18, 0x02	; 2
     3f0:	25 23       	and	r18, r21
     3f2:	22 b9       	out	0x02, r18	; 2
     3f4:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     3f6:	21 b1       	in	r18, 0x01	; 1
     3f8:	25 23       	and	r18, r21
     3fa:	21 b9       	out	0x01, r18	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     3fc:	22 b1       	in	r18, 0x02	; 2
     3fe:	29 2b       	or	r18, r25
     400:	22 b9       	out	0x02, r18	; 2
     402:	93 e0       	ldi	r25, 0x03	; 3
     404:	9a 95       	dec	r25
     406:	f1 f7       	brne	.-4      	; 0x404 <ds1820_re_byte+0x20e>
     408:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     40a:	20 b1       	in	r18, 0x00	; 0
     40c:	30 e1       	ldi	r19, 0x10	; 16
     40e:	3a 95       	dec	r19
     410:	f1 f7       	brne	.-4      	; 0x40e <ds1820_re_byte+0x218>
     412:	00 c0       	rjmp	.+0      	; 0x414 <ds1820_re_byte+0x21e>
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	26 23       	and	r18, r22
     418:	37 23       	and	r19, r23
     41a:	02 c0       	rjmp	.+4      	; 0x420 <ds1820_re_byte+0x22a>
     41c:	35 95       	asr	r19
     41e:	27 95       	ror	r18
     420:	8a 95       	dec	r24
     422:	e2 f7       	brpl	.-8      	; 0x41c <ds1820_re_byte+0x226>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     424:	21 30       	cpi	r18, 0x01	; 1
     426:	21 f0       	breq	.+8      	; 0x430 <ds1820_re_byte+0x23a>
			rebyte|=(1<<i);
		}
	}
	return(rebyte);
}
     428:	84 2f       	mov	r24, r20
     42a:	08 95       	ret

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
			rebyte|=(1<<i);
     42c:	42 60       	ori	r20, 0x02	; 2
     42e:	33 cf       	rjmp	.-410    	; 0x296 <ds1820_re_byte+0xa0>
     430:	40 68       	ori	r20, 0x80	; 128
		}
	}
	return(rebyte);
}
     432:	84 2f       	mov	r24, r20
     434:	08 95       	ret

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
			rebyte|=(1<<i);
     436:	40 64       	ori	r20, 0x40	; 64
     438:	d7 cf       	rjmp	.-82     	; 0x3e8 <ds1820_re_byte+0x1f2>
     43a:	40 62       	ori	r20, 0x20	; 32
     43c:	b4 cf       	rjmp	.-152    	; 0x3a6 <ds1820_re_byte+0x1b0>
     43e:	40 61       	ori	r20, 0x10	; 16
     440:	90 cf       	rjmp	.-224    	; 0x362 <ds1820_re_byte+0x16c>
     442:	48 60       	ori	r20, 0x08	; 8
     444:	6c cf       	rjmp	.-296    	; 0x31e <ds1820_re_byte+0x128>
     446:	44 60       	ori	r20, 0x04	; 4
     448:	48 cf       	rjmp	.-368    	; 0x2da <ds1820_re_byte+0xe4>

0000044a <ds1820_wr_byte>:
	return(rebyte);
}
//-----------------------------------------
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	d8 2f       	mov	r29, r24
     450:	c6 2f       	mov	r28, r22
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     452:	81 70       	andi	r24, 0x01	; 1
     454:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
		wrbyte = wrbyte >> 1;
     458:	d6 95       	lsr	r29
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     45a:	8d 2f       	mov	r24, r29
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	6c 2f       	mov	r22, r28
     460:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
		wrbyte = wrbyte >> 1;
     464:	d6 95       	lsr	r29
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     466:	8d 2f       	mov	r24, r29
     468:	81 70       	andi	r24, 0x01	; 1
     46a:	6c 2f       	mov	r22, r28
     46c:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
		wrbyte = wrbyte >> 1;
     470:	d6 95       	lsr	r29
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     472:	8d 2f       	mov	r24, r29
     474:	81 70       	andi	r24, 0x01	; 1
     476:	6c 2f       	mov	r22, r28
     478:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
		wrbyte = wrbyte >> 1;
     47c:	d6 95       	lsr	r29
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     47e:	8d 2f       	mov	r24, r29
     480:	81 70       	andi	r24, 0x01	; 1
     482:	6c 2f       	mov	r22, r28
     484:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
		wrbyte = wrbyte >> 1;
     488:	d6 95       	lsr	r29
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     48a:	8d 2f       	mov	r24, r29
     48c:	81 70       	andi	r24, 0x01	; 1
     48e:	6c 2f       	mov	r22, r28
     490:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
		wrbyte = wrbyte >> 1;
     494:	d6 95       	lsr	r29
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     496:	8d 2f       	mov	r24, r29
     498:	81 70       	andi	r24, 0x01	; 1
     49a:	6c 2f       	mov	r22, r28
     49c:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     4a0:	8d 2f       	mov	r24, r29
     4a2:	86 95       	lsr	r24
     4a4:	6c 2f       	mov	r22, r28
     4a6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <ds1820_wr_byte+0x62>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <ds1820_wr_byte+0x64>
     4ae:	00 00       	nop
		wrbyte = wrbyte >> 1;
	}
	_delay_us(5);
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <ds1820_read_temp>:
//-----------------------------------------
// Read temperature
//-----------------------------------------
float  ds1820_read_temp(uint8_t used_pin)	 {
     4b6:	8f 92       	push	r8
     4b8:	9f 92       	push	r9
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	29 97       	sbiw	r28, 0x09	; 9
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	f8 2e       	mov	r15, r24
	uint8_t error,i;
	uint16_t j=0;
    uint8_t scratchpad[9];
	float temp=0;
	scratchpad[0]=0;
     4e0:	19 82       	std	Y+1, r1	; 0x01
	scratchpad[1]=0;
     4e2:	1a 82       	std	Y+2, r1	; 0x02
	scratchpad[2]=0;
	scratchpad[3]=0;
	scratchpad[4]=0;
	scratchpad[5]=0;
	scratchpad[6]=0;
     4e4:	1f 82       	std	Y+7, r1	; 0x07
	scratchpad[7]=0;
     4e6:	18 86       	std	Y+8, r1	; 0x08
//----------------------------------------
// Reset DS18S20
//----------------------------------------
uint8_t ds1820_reset(uint8_t used_pin) {
	uint8_t err=100;
	DS1820_DDR |= 1<<used_pin;						// define as ouput
     4e8:	81 b1       	in	r24, 0x01	; 1
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	c9 2e       	mov	r12, r25
     4ee:	d1 2c       	mov	r13, r1
     4f0:	0f 2c       	mov	r0, r15
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <ds1820_read_temp+0x42>
     4f4:	cc 0c       	add	r12, r12
     4f6:	dd 1c       	adc	r13, r13
     4f8:	0a 94       	dec	r0
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <ds1820_read_temp+0x3e>
     4fc:	0c 2d       	mov	r16, r12
     4fe:	8c 29       	or	r24, r12
     500:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
     502:	82 b1       	in	r24, 0x02	; 2
     504:	1c 2d       	mov	r17, r12
     506:	10 95       	com	r17
     508:	81 23       	and	r24, r17
     50a:	82 b9       	out	0x02, r24	; 2
     50c:	80 ea       	ldi	r24, 0xA0	; 160
     50e:	8a 95       	dec	r24
     510:	f1 f7       	brne	.-4      	; 0x50e <ds1820_read_temp+0x58>
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     512:	81 b1       	in	r24, 0x01	; 1
     514:	81 23       	and	r24, r17
     516:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;						//Pullup on
     518:	82 b1       	in	r24, 0x02	; 2
     51a:	8c 29       	or	r24, r12
     51c:	82 b9       	out	0x02, r24	; 2
     51e:	96 e1       	ldi	r25, 0x16	; 22
     520:	9a 95       	dec	r25
     522:	f1 f7       	brne	.-4      	; 0x520 <ds1820_read_temp+0x6a>
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     524:	20 b1       	in	r18, 0x00	; 0
     526:	80 e5       	ldi	r24, 0x50	; 80
     528:	8a 95       	dec	r24
     52a:	f1 f7       	brne	.-4      	; 0x528 <ds1820_read_temp+0x72>
	_delay_us(240);									// 240 us
	if((DS1820_PIN & (1<<used_pin)) == 0 ){			// short circuit --> err=2
     52c:	80 b1       	in	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0f 2c       	mov	r0, r15
     532:	02 c0       	rjmp	.+4      	; 0x538 <ds1820_read_temp+0x82>
     534:	95 95       	asr	r25
     536:	87 95       	ror	r24
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <ds1820_read_temp+0x7e>
     53c:	80 fd       	sbrc	r24, 0
     53e:	86 c0       	rjmp	.+268    	; 0x64c <ds1820_read_temp+0x196>
    
	    for (i=0; i<9; i++) {   									//8. Get scratchpad byte by byte
			scratchpad[i]=ds1820_re_byte(used_pin); 					//9. read one DS18S20 byte
	    }
	}
	if(scratchpad[1]==0x00 && scratchpad[7]!=0){					//Value pos.
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	88 23       	and	r24, r24
     544:	c9 f1       	breq	.+114    	; 0x5b8 <ds1820_read_temp+0x102>
     546:	19 81       	ldd	r17, Y+1	; 0x01

	}
	if(scratchpad[1]!=0x00){										//Value negative
		uint8_t tmp;
		tmp =scratchpad[0];											//Save Kommabit
		tmp= ~ tmp;
     548:	61 2f       	mov	r22, r17
     54a:	60 95       	com	r22
		tmp= tmp >> 1;
     54c:	66 95       	lsr	r22
		temp = (-1)*(tmp+1);
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	60 95       	com	r22
     552:	70 95       	com	r23
     554:	88 27       	eor	r24, r24
     556:	77 fd       	sbrc	r23, 7
     558:	80 95       	com	r24
     55a:	98 2f       	mov	r25, r24
     55c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__floatsisf>
		if ((scratchpad[0]&0b00000001)==1){
     560:	10 ff       	sbrs	r17, 0
     562:	0f c0       	rjmp	.+30     	; 0x582 <ds1820_read_temp+0xcc>
			temp=temp+0.5;
     564:	47 2f       	mov	r20, r23
     566:	38 2f       	mov	r19, r24
     568:	29 2f       	mov	r18, r25
     56a:	86 2f       	mov	r24, r22
     56c:	94 2f       	mov	r25, r20
     56e:	a3 2f       	mov	r26, r19
     570:	b2 2f       	mov	r27, r18
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	5f e3       	ldi	r21, 0x3F	; 63
     57e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
		}

	}

	return temp;
}
     582:	38 2f       	mov	r19, r24
     584:	29 2f       	mov	r18, r25
     586:	86 2f       	mov	r24, r22
     588:	97 2f       	mov	r25, r23
     58a:	a3 2f       	mov	r26, r19
     58c:	b2 2f       	mov	r27, r18
     58e:	bc 01       	movw	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	29 96       	adiw	r28, 0x09	; 9
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	08 95       	ret
    
	    for (i=0; i<9; i++) {   									//8. Get scratchpad byte by byte
			scratchpad[i]=ds1820_re_byte(used_pin); 					//9. read one DS18S20 byte
	    }
	}
	if(scratchpad[1]==0x00 && scratchpad[7]!=0){					//Value pos.
     5b8:	68 85       	ldd	r22, Y+8	; 0x08
     5ba:	66 23       	and	r22, r22
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <ds1820_read_temp+0x10a>
     5be:	41 c0       	rjmp	.+130    	; 0x642 <ds1820_read_temp+0x18c>
		scratchpad[0]=scratchpad[0] >> 1;
		temp=(scratchpad[0]-0.25f+(((float)scratchpad[7]-(float)scratchpad[6])/(float)scratchpad[7]));
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__floatunsisf>
     5ca:	6b 01       	movw	r12, r22
     5cc:	7c 01       	movw	r14, r24
	    for (i=0; i<9; i++) {   									//8. Get scratchpad byte by byte
			scratchpad[i]=ds1820_re_byte(used_pin); 					//9. read one DS18S20 byte
	    }
	}
	if(scratchpad[1]==0x00 && scratchpad[7]!=0){					//Value pos.
		scratchpad[0]=scratchpad[0] >> 1;
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	66 95       	lsr	r22
		temp=(scratchpad[0]-0.25f+(((float)scratchpad[7]-(float)scratchpad[6])/(float)scratchpad[7]));
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__floatsisf>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e8       	ldi	r20, 0x80	; 128
     5e2:	5e e3       	ldi	r21, 0x3E	; 62
     5e4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
     5e8:	4b 01       	movw	r8, r22
     5ea:	5c 01       	movw	r10, r24
     5ec:	6f 81       	ldd	r22, Y+7	; 0x07
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__floatunsisf>
     5f8:	9b 01       	movw	r18, r22
     5fa:	ac 01       	movw	r20, r24
     5fc:	c7 01       	movw	r24, r14
     5fe:	b6 01       	movw	r22, r12
     600:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
     604:	a7 01       	movw	r20, r14
     606:	96 01       	movw	r18, r12
     608:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     60c:	9b 01       	movw	r18, r22
     60e:	ac 01       	movw	r20, r24
     610:	c5 01       	movw	r24, r10
     612:	b4 01       	movw	r22, r8
     614:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
		temp = (floor(temp*10.0+0.5)/10);							//Round value .x
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e2       	ldi	r20, 0x20	; 32
     61e:	51 e4       	ldi	r21, 0x41	; 65
     620:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__mulsf3>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	5f e3       	ldi	r21, 0x3F	; 63
     62c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     630:	0e 94 35 0c 	call	0x186a	; 0x186a <floor>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e2       	ldi	r20, 0x20	; 32
     63a:	51 e4       	ldi	r21, 0x41	; 65
     63c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     640:	a0 cf       	rjmp	.-192    	; 0x582 <ds1820_read_temp+0xcc>
//-----------------------------------------
float  ds1820_read_temp(uint8_t used_pin)	 {
	uint8_t error,i;
	uint16_t j=0;
    uint8_t scratchpad[9];
	float temp=0;
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9b cf       	rjmp	.-202    	; 0x582 <ds1820_read_temp+0xcc>
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
	DS1820_PORT |= 1<<used_pin;						//Pullup on
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     64c:	82 2f       	mov	r24, r18
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8c 21       	and	r24, r12
     652:	9d 21       	and	r25, r13
     654:	0f 2c       	mov	r0, r15
     656:	02 c0       	rjmp	.+4      	; 0x65c <ds1820_read_temp+0x1a6>
     658:	95 95       	asr	r25
     65a:	87 95       	ror	r24
     65c:	0a 94       	dec	r0
     65e:	e2 f7       	brpl	.-8      	; 0x658 <ds1820_read_temp+0x1a2>
	scratchpad[5]=0;
	scratchpad[6]=0;
	scratchpad[7]=0;
	scratchpad[8]=0;
	error=ds1820_reset(used_pin);									//1. Reset
	if (error==0){
     660:	88 23       	and	r24, r24
     662:	09 f0       	breq	.+2      	; 0x666 <ds1820_read_temp+0x1b0>
     664:	6d cf       	rjmp	.-294    	; 0x540 <ds1820_read_temp+0x8a>
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     666:	6f 2d       	mov	r22, r15
     668:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	6f 2d       	mov	r22, r15
     670:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	6f 2d       	mov	r22, r15
     678:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	6f 2d       	mov	r22, r15
     680:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	6f 2d       	mov	r22, r15
     688:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	6f 2d       	mov	r22, r15
     690:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	6f 2d       	mov	r22, r15
     698:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	6f 2d       	mov	r22, r15
     6a0:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <ds1820_read_temp+0x1f0>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <ds1820_read_temp+0x1f2>
     6a8:	00 00       	nop
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	6f 2d       	mov	r22, r15
     6ae:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	6f 2d       	mov	r22, r15
     6b6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	6f 2d       	mov	r22, r15
     6be:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	6f 2d       	mov	r22, r15
     6c6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	6f 2d       	mov	r22, r15
     6ce:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	6f 2d       	mov	r22, r15
     6d6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	6f 2d       	mov	r22, r15
     6de:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	6f 2d       	mov	r22, r15
     6e6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <ds1820_read_temp+0x236>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <ds1820_read_temp+0x238>
     6ee:	00 00       	nop
     6f0:	49 ee       	ldi	r20, 0xE9	; 233
     6f2:	53 e0       	ldi	r21, 0x03	; 3
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     6f4:	81 b1       	in	r24, 0x01	; 1
     6f6:	80 2b       	or	r24, r16
     6f8:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     6fa:	82 b1       	in	r24, 0x02	; 2
     6fc:	81 23       	and	r24, r17
     6fe:	82 b9       	out	0x02, r24	; 2
     700:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     702:	81 b1       	in	r24, 0x01	; 1
     704:	81 23       	and	r24, r17
     706:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     708:	82 b1       	in	r24, 0x02	; 2
     70a:	80 2b       	or	r24, r16
     70c:	82 b9       	out	0x02, r24	; 2
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	9a 95       	dec	r25
     712:	f1 f7       	brne	.-4      	; 0x710 <ds1820_read_temp+0x25a>
     714:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     716:	80 b1       	in	r24, 0x00	; 0
     718:	90 e1       	ldi	r25, 0x10	; 16
     71a:	9a 95       	dec	r25
     71c:	f1 f7       	brne	.-4      	; 0x71a <ds1820_read_temp+0x264>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <ds1820_read_temp+0x26a>
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	8c 21       	and	r24, r12
     724:	9d 21       	and	r25, r13
     726:	0f 2c       	mov	r0, r15
     728:	02 c0       	rjmp	.+4      	; 0x72e <ds1820_read_temp+0x278>
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	0a 94       	dec	r0
     730:	e2 f7       	brpl	.-8      	; 0x72a <ds1820_read_temp+0x274>
}
//-----------------------------------------
// Read 1 byte from DS18S20
//-----------------------------------------
uint8_t ds1820_re_byte(uint8_t used_pin) {
	uint8_t rebyte =0x00;
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	09 f0       	breq	.+2      	; 0x73a <ds1820_read_temp+0x284>
     738:	20 e0       	ldi	r18, 0x00	; 0
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     73a:	81 b1       	in	r24, 0x01	; 1
     73c:	80 2b       	or	r24, r16
     73e:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     740:	82 b1       	in	r24, 0x02	; 2
     742:	81 23       	and	r24, r17
     744:	82 b9       	out	0x02, r24	; 2
     746:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     748:	81 b1       	in	r24, 0x01	; 1
     74a:	81 23       	and	r24, r17
     74c:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     74e:	82 b1       	in	r24, 0x02	; 2
     750:	80 2b       	or	r24, r16
     752:	82 b9       	out	0x02, r24	; 2
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	8a 95       	dec	r24
     758:	f1 f7       	brne	.-4      	; 0x756 <ds1820_read_temp+0x2a0>
     75a:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     75c:	80 b1       	in	r24, 0x00	; 0
     75e:	90 e1       	ldi	r25, 0x10	; 16
     760:	9a 95       	dec	r25
     762:	f1 f7       	brne	.-4      	; 0x760 <ds1820_read_temp+0x2aa>
     764:	00 c0       	rjmp	.+0      	; 0x766 <ds1820_read_temp+0x2b0>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	8c 21       	and	r24, r12
     76a:	9d 21       	and	r25, r13
     76c:	0f 2c       	mov	r0, r15
     76e:	02 c0       	rjmp	.+4      	; 0x774 <ds1820_read_temp+0x2be>
     770:	95 95       	asr	r25
     772:	87 95       	ror	r24
     774:	0a 94       	dec	r0
     776:	e2 f7       	brpl	.-8      	; 0x770 <ds1820_read_temp+0x2ba>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	09 f4       	brne	.+2      	; 0x77e <ds1820_read_temp+0x2c8>
     77c:	57 c2       	rjmp	.+1198   	; 0xc2c <ds1820_read_temp+0x776>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     77e:	81 b1       	in	r24, 0x01	; 1
     780:	80 2b       	or	r24, r16
     782:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     784:	82 b1       	in	r24, 0x02	; 2
     786:	81 23       	and	r24, r17
     788:	82 b9       	out	0x02, r24	; 2
     78a:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     78c:	81 b1       	in	r24, 0x01	; 1
     78e:	81 23       	and	r24, r17
     790:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     792:	82 b1       	in	r24, 0x02	; 2
     794:	80 2b       	or	r24, r16
     796:	82 b9       	out	0x02, r24	; 2
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	8a 95       	dec	r24
     79c:	f1 f7       	brne	.-4      	; 0x79a <ds1820_read_temp+0x2e4>
     79e:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     7a0:	80 b1       	in	r24, 0x00	; 0
     7a2:	90 e1       	ldi	r25, 0x10	; 16
     7a4:	9a 95       	dec	r25
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <ds1820_read_temp+0x2ee>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <ds1820_read_temp+0x2f4>
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	8c 21       	and	r24, r12
     7ae:	9d 21       	and	r25, r13
     7b0:	0f 2c       	mov	r0, r15
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <ds1820_read_temp+0x302>
     7b4:	95 95       	asr	r25
     7b6:	87 95       	ror	r24
     7b8:	0a 94       	dec	r0
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <ds1820_read_temp+0x2fe>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	09 f4       	brne	.+2      	; 0x7c2 <ds1820_read_temp+0x30c>
     7c0:	33 c2       	rjmp	.+1126   	; 0xc28 <ds1820_read_temp+0x772>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     7c2:	81 b1       	in	r24, 0x01	; 1
     7c4:	80 2b       	or	r24, r16
     7c6:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     7c8:	82 b1       	in	r24, 0x02	; 2
     7ca:	81 23       	and	r24, r17
     7cc:	82 b9       	out	0x02, r24	; 2
     7ce:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     7d0:	81 b1       	in	r24, 0x01	; 1
     7d2:	81 23       	and	r24, r17
     7d4:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     7d6:	82 b1       	in	r24, 0x02	; 2
     7d8:	80 2b       	or	r24, r16
     7da:	82 b9       	out	0x02, r24	; 2
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	8a 95       	dec	r24
     7e0:	f1 f7       	brne	.-4      	; 0x7de <ds1820_read_temp+0x328>
     7e2:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     7e4:	80 b1       	in	r24, 0x00	; 0
     7e6:	90 e1       	ldi	r25, 0x10	; 16
     7e8:	9a 95       	dec	r25
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <ds1820_read_temp+0x332>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <ds1820_read_temp+0x338>
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	8c 21       	and	r24, r12
     7f2:	9d 21       	and	r25, r13
     7f4:	0f 2c       	mov	r0, r15
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <ds1820_read_temp+0x346>
     7f8:	95 95       	asr	r25
     7fa:	87 95       	ror	r24
     7fc:	0a 94       	dec	r0
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <ds1820_read_temp+0x342>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	09 f4       	brne	.+2      	; 0x806 <ds1820_read_temp+0x350>
     804:	0f c2       	rjmp	.+1054   	; 0xc24 <ds1820_read_temp+0x76e>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     806:	81 b1       	in	r24, 0x01	; 1
     808:	80 2b       	or	r24, r16
     80a:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     80c:	82 b1       	in	r24, 0x02	; 2
     80e:	81 23       	and	r24, r17
     810:	82 b9       	out	0x02, r24	; 2
     812:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     814:	81 b1       	in	r24, 0x01	; 1
     816:	81 23       	and	r24, r17
     818:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     81a:	82 b1       	in	r24, 0x02	; 2
     81c:	80 2b       	or	r24, r16
     81e:	82 b9       	out	0x02, r24	; 2
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	8a 95       	dec	r24
     824:	f1 f7       	brne	.-4      	; 0x822 <ds1820_read_temp+0x36c>
     826:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     828:	80 b1       	in	r24, 0x00	; 0
     82a:	90 e1       	ldi	r25, 0x10	; 16
     82c:	9a 95       	dec	r25
     82e:	f1 f7       	brne	.-4      	; 0x82c <ds1820_read_temp+0x376>
     830:	00 c0       	rjmp	.+0      	; 0x832 <ds1820_read_temp+0x37c>
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	8c 21       	and	r24, r12
     836:	9d 21       	and	r25, r13
     838:	0f 2c       	mov	r0, r15
     83a:	02 c0       	rjmp	.+4      	; 0x840 <ds1820_read_temp+0x38a>
     83c:	95 95       	asr	r25
     83e:	87 95       	ror	r24
     840:	0a 94       	dec	r0
     842:	e2 f7       	brpl	.-8      	; 0x83c <ds1820_read_temp+0x386>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	09 f4       	brne	.+2      	; 0x84a <ds1820_read_temp+0x394>
     848:	eb c1       	rjmp	.+982    	; 0xc20 <ds1820_read_temp+0x76a>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     84a:	81 b1       	in	r24, 0x01	; 1
     84c:	80 2b       	or	r24, r16
     84e:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     850:	82 b1       	in	r24, 0x02	; 2
     852:	81 23       	and	r24, r17
     854:	82 b9       	out	0x02, r24	; 2
     856:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     858:	81 b1       	in	r24, 0x01	; 1
     85a:	81 23       	and	r24, r17
     85c:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     85e:	82 b1       	in	r24, 0x02	; 2
     860:	80 2b       	or	r24, r16
     862:	82 b9       	out	0x02, r24	; 2
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	8a 95       	dec	r24
     868:	f1 f7       	brne	.-4      	; 0x866 <ds1820_read_temp+0x3b0>
     86a:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     86c:	80 b1       	in	r24, 0x00	; 0
     86e:	90 e1       	ldi	r25, 0x10	; 16
     870:	9a 95       	dec	r25
     872:	f1 f7       	brne	.-4      	; 0x870 <ds1820_read_temp+0x3ba>
     874:	00 c0       	rjmp	.+0      	; 0x876 <ds1820_read_temp+0x3c0>
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	8c 21       	and	r24, r12
     87a:	9d 21       	and	r25, r13
     87c:	0f 2c       	mov	r0, r15
     87e:	02 c0       	rjmp	.+4      	; 0x884 <ds1820_read_temp+0x3ce>
     880:	95 95       	asr	r25
     882:	87 95       	ror	r24
     884:	0a 94       	dec	r0
     886:	e2 f7       	brpl	.-8      	; 0x880 <ds1820_read_temp+0x3ca>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     888:	81 30       	cpi	r24, 0x01	; 1
     88a:	09 f4       	brne	.+2      	; 0x88e <ds1820_read_temp+0x3d8>
     88c:	d3 c1       	rjmp	.+934    	; 0xc34 <ds1820_read_temp+0x77e>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     88e:	81 b1       	in	r24, 0x01	; 1
     890:	80 2b       	or	r24, r16
     892:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     894:	82 b1       	in	r24, 0x02	; 2
     896:	81 23       	and	r24, r17
     898:	82 b9       	out	0x02, r24	; 2
     89a:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     89c:	81 b1       	in	r24, 0x01	; 1
     89e:	81 23       	and	r24, r17
     8a0:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     8a2:	82 b1       	in	r24, 0x02	; 2
     8a4:	80 2b       	or	r24, r16
     8a6:	82 b9       	out	0x02, r24	; 2
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	8a 95       	dec	r24
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <ds1820_read_temp+0x3f4>
     8ae:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     8b0:	80 b1       	in	r24, 0x00	; 0
     8b2:	90 e1       	ldi	r25, 0x10	; 16
     8b4:	9a 95       	dec	r25
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <ds1820_read_temp+0x3fe>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <ds1820_read_temp+0x404>
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	8c 21       	and	r24, r12
     8be:	9d 21       	and	r25, r13
     8c0:	0f 2c       	mov	r0, r15
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <ds1820_read_temp+0x412>
     8c4:	95 95       	asr	r25
     8c6:	87 95       	ror	r24
     8c8:	0a 94       	dec	r0
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <ds1820_read_temp+0x40e>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <ds1820_read_temp+0x41c>
     8d0:	af c1       	rjmp	.+862    	; 0xc30 <ds1820_read_temp+0x77a>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     8d2:	81 b1       	in	r24, 0x01	; 1
     8d4:	80 2b       	or	r24, r16
     8d6:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     8d8:	82 b1       	in	r24, 0x02	; 2
     8da:	81 23       	and	r24, r17
     8dc:	82 b9       	out	0x02, r24	; 2
     8de:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     8e0:	81 b1       	in	r24, 0x01	; 1
     8e2:	81 23       	and	r24, r17
     8e4:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     8e6:	82 b1       	in	r24, 0x02	; 2
     8e8:	80 2b       	or	r24, r16
     8ea:	82 b9       	out	0x02, r24	; 2
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	8a 95       	dec	r24
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <ds1820_read_temp+0x438>
     8f2:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     8f4:	80 b1       	in	r24, 0x00	; 0
     8f6:	90 e1       	ldi	r25, 0x10	; 16
     8f8:	9a 95       	dec	r25
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <ds1820_read_temp+0x442>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <ds1820_read_temp+0x448>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	8c 21       	and	r24, r12
     902:	9d 21       	and	r25, r13
     904:	0f 2c       	mov	r0, r15
     906:	02 c0       	rjmp	.+4      	; 0x90c <ds1820_read_temp+0x456>
     908:	95 95       	asr	r25
     90a:	87 95       	ror	r24
     90c:	0a 94       	dec	r0
     90e:	e2 f7       	brpl	.-8      	; 0x908 <ds1820_read_temp+0x452>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	09 f4       	brne	.+2      	; 0x916 <ds1820_read_temp+0x460>
     914:	7b c1       	rjmp	.+758    	; 0xc0c <ds1820_read_temp+0x756>
//----------------------------------------
// Reset DS18S20
//----------------------------------------
uint8_t ds1820_reset(uint8_t used_pin) {
	uint8_t err=100;
	DS1820_DDR |= 1<<used_pin;						// define as ouput
     916:	81 b1       	in	r24, 0x01	; 1
     918:	80 2b       	or	r24, r16
     91a:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
     91c:	82 b1       	in	r24, 0x02	; 2
     91e:	81 23       	and	r24, r17
     920:	82 b9       	out	0x02, r24	; 2
     922:	80 ea       	ldi	r24, 0xA0	; 160
     924:	8a 95       	dec	r24
     926:	f1 f7       	brne	.-4      	; 0x924 <ds1820_read_temp+0x46e>
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     928:	81 b1       	in	r24, 0x01	; 1
     92a:	81 23       	and	r24, r17
     92c:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;						//Pullup on
     92e:	82 b1       	in	r24, 0x02	; 2
     930:	80 2b       	or	r24, r16
     932:	82 b9       	out	0x02, r24	; 2
     934:	96 e1       	ldi	r25, 0x16	; 22
     936:	9a 95       	dec	r25
     938:	f1 f7       	brne	.-4      	; 0x936 <ds1820_read_temp+0x480>
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     93a:	80 b1       	in	r24, 0x00	; 0
     93c:	80 e5       	ldi	r24, 0x50	; 80
     93e:	8a 95       	dec	r24
     940:	f1 f7       	brne	.-4      	; 0x93e <ds1820_read_temp+0x488>
	_delay_us(240);									// 240 us
	if((DS1820_PIN & (1<<used_pin)) == 0 ){			// short circuit --> err=2
     942:	80 b1       	in	r24, 0x00	; 0
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	6f 2d       	mov	r22, r15
     948:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	6f 2d       	mov	r22, r15
     950:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	6f 2d       	mov	r22, r15
     958:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	6f 2d       	mov	r22, r15
     960:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	6f 2d       	mov	r22, r15
     968:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	6f 2d       	mov	r22, r15
     970:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	6f 2d       	mov	r22, r15
     978:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	6f 2d       	mov	r22, r15
     980:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     984:	00 c0       	rjmp	.+0      	; 0x986 <ds1820_read_temp+0x4d0>
     986:	00 c0       	rjmp	.+0      	; 0x988 <ds1820_read_temp+0x4d2>
     988:	00 00       	nop
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	6f 2d       	mov	r22, r15
     98e:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	6f 2d       	mov	r22, r15
     996:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	6f 2d       	mov	r22, r15
     99e:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	6f 2d       	mov	r22, r15
     9a6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	6f 2d       	mov	r22, r15
     9ae:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	6f 2d       	mov	r22, r15
     9b6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	6f 2d       	mov	r22, r15
     9be:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	6f 2d       	mov	r22, r15
     9c6:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <ds1820_read_temp+0x516>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <ds1820_read_temp+0x518>
     9ce:	00 00       	nop
     9d0:	fe 01       	movw	r30, r28
     9d2:	31 96       	adiw	r30, 0x01	; 1
	_delay_us(5);
}
//-----------------------------------------
// Read temperature
//-----------------------------------------
float  ds1820_read_temp(uint8_t used_pin)	 {
     9d4:	ae 01       	movw	r20, r28
     9d6:	46 5f       	subi	r20, 0xF6	; 246
     9d8:	5f 4f       	sbci	r21, 0xFF	; 255
     9da:	d1 c0       	rjmp	.+418    	; 0xb7e <ds1820_read_temp+0x6c8>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     9dc:	81 b1       	in	r24, 0x01	; 1
     9de:	80 2b       	or	r24, r16
     9e0:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     9e2:	82 b1       	in	r24, 0x02	; 2
     9e4:	81 23       	and	r24, r17
     9e6:	82 b9       	out	0x02, r24	; 2
     9e8:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     9ea:	81 b1       	in	r24, 0x01	; 1
     9ec:	81 23       	and	r24, r17
     9ee:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     9f0:	82 b1       	in	r24, 0x02	; 2
     9f2:	80 2b       	or	r24, r16
     9f4:	82 b9       	out	0x02, r24	; 2
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	8a 95       	dec	r24
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <ds1820_read_temp+0x542>
     9fc:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     9fe:	80 b1       	in	r24, 0x00	; 0
     a00:	90 e1       	ldi	r25, 0x10	; 16
     a02:	9a 95       	dec	r25
     a04:	f1 f7       	brne	.-4      	; 0xa02 <ds1820_read_temp+0x54c>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <ds1820_read_temp+0x552>
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	8c 21       	and	r24, r12
     a0c:	9d 21       	and	r25, r13
     a0e:	0f 2c       	mov	r0, r15
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <ds1820_read_temp+0x560>
     a12:	95 95       	asr	r25
     a14:	87 95       	ror	r24
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <ds1820_read_temp+0x55c>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <ds1820_read_temp+0x56a>
     a1e:	16 c1       	rjmp	.+556    	; 0xc4c <ds1820_read_temp+0x796>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     a20:	81 b1       	in	r24, 0x01	; 1
     a22:	80 2b       	or	r24, r16
     a24:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     a26:	82 b1       	in	r24, 0x02	; 2
     a28:	81 23       	and	r24, r17
     a2a:	82 b9       	out	0x02, r24	; 2
     a2c:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     a2e:	81 b1       	in	r24, 0x01	; 1
     a30:	81 23       	and	r24, r17
     a32:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     a34:	82 b1       	in	r24, 0x02	; 2
     a36:	80 2b       	or	r24, r16
     a38:	82 b9       	out	0x02, r24	; 2
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <ds1820_read_temp+0x586>
     a40:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     a42:	80 b1       	in	r24, 0x00	; 0
     a44:	90 e1       	ldi	r25, 0x10	; 16
     a46:	9a 95       	dec	r25
     a48:	f1 f7       	brne	.-4      	; 0xa46 <ds1820_read_temp+0x590>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <ds1820_read_temp+0x596>
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	8c 21       	and	r24, r12
     a50:	9d 21       	and	r25, r13
     a52:	0f 2c       	mov	r0, r15
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <ds1820_read_temp+0x5a4>
     a56:	95 95       	asr	r25
     a58:	87 95       	ror	r24
     a5a:	0a 94       	dec	r0
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <ds1820_read_temp+0x5a0>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	09 f4       	brne	.+2      	; 0xa64 <ds1820_read_temp+0x5ae>
     a62:	f2 c0       	rjmp	.+484    	; 0xc48 <ds1820_read_temp+0x792>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     a64:	81 b1       	in	r24, 0x01	; 1
     a66:	80 2b       	or	r24, r16
     a68:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     a6a:	82 b1       	in	r24, 0x02	; 2
     a6c:	81 23       	and	r24, r17
     a6e:	82 b9       	out	0x02, r24	; 2
     a70:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     a72:	81 b1       	in	r24, 0x01	; 1
     a74:	81 23       	and	r24, r17
     a76:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     a78:	82 b1       	in	r24, 0x02	; 2
     a7a:	80 2b       	or	r24, r16
     a7c:	82 b9       	out	0x02, r24	; 2
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	8a 95       	dec	r24
     a82:	f1 f7       	brne	.-4      	; 0xa80 <ds1820_read_temp+0x5ca>
     a84:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     a86:	80 b1       	in	r24, 0x00	; 0
     a88:	90 e1       	ldi	r25, 0x10	; 16
     a8a:	9a 95       	dec	r25
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <ds1820_read_temp+0x5d4>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <ds1820_read_temp+0x5da>
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	8c 21       	and	r24, r12
     a94:	9d 21       	and	r25, r13
     a96:	0f 2c       	mov	r0, r15
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <ds1820_read_temp+0x5e8>
     a9a:	95 95       	asr	r25
     a9c:	87 95       	ror	r24
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <ds1820_read_temp+0x5e4>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <ds1820_read_temp+0x5f2>
     aa6:	ce c0       	rjmp	.+412    	; 0xc44 <ds1820_read_temp+0x78e>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     aa8:	81 b1       	in	r24, 0x01	; 1
     aaa:	80 2b       	or	r24, r16
     aac:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     aae:	82 b1       	in	r24, 0x02	; 2
     ab0:	81 23       	and	r24, r17
     ab2:	82 b9       	out	0x02, r24	; 2
     ab4:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     ab6:	81 b1       	in	r24, 0x01	; 1
     ab8:	81 23       	and	r24, r17
     aba:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     abc:	82 b1       	in	r24, 0x02	; 2
     abe:	80 2b       	or	r24, r16
     ac0:	82 b9       	out	0x02, r24	; 2
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	8a 95       	dec	r24
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <ds1820_read_temp+0x60e>
     ac8:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     aca:	80 b1       	in	r24, 0x00	; 0
     acc:	90 e1       	ldi	r25, 0x10	; 16
     ace:	9a 95       	dec	r25
     ad0:	f1 f7       	brne	.-4      	; 0xace <ds1820_read_temp+0x618>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <ds1820_read_temp+0x61e>
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	8c 21       	and	r24, r12
     ad8:	9d 21       	and	r25, r13
     ada:	0f 2c       	mov	r0, r15
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <ds1820_read_temp+0x62c>
     ade:	95 95       	asr	r25
     ae0:	87 95       	ror	r24
     ae2:	0a 94       	dec	r0
     ae4:	e2 f7       	brpl	.-8      	; 0xade <ds1820_read_temp+0x628>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f4       	brne	.+2      	; 0xaec <ds1820_read_temp+0x636>
     aea:	aa c0       	rjmp	.+340    	; 0xc40 <ds1820_read_temp+0x78a>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     aec:	81 b1       	in	r24, 0x01	; 1
     aee:	80 2b       	or	r24, r16
     af0:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     af2:	82 b1       	in	r24, 0x02	; 2
     af4:	81 23       	and	r24, r17
     af6:	82 b9       	out	0x02, r24	; 2
     af8:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     afa:	81 b1       	in	r24, 0x01	; 1
     afc:	81 23       	and	r24, r17
     afe:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     b00:	82 b1       	in	r24, 0x02	; 2
     b02:	80 2b       	or	r24, r16
     b04:	82 b9       	out	0x02, r24	; 2
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	8a 95       	dec	r24
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <ds1820_read_temp+0x652>
     b0c:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     b0e:	80 b1       	in	r24, 0x00	; 0
     b10:	90 e1       	ldi	r25, 0x10	; 16
     b12:	9a 95       	dec	r25
     b14:	f1 f7       	brne	.-4      	; 0xb12 <ds1820_read_temp+0x65c>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <ds1820_read_temp+0x662>
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	8c 21       	and	r24, r12
     b1c:	9d 21       	and	r25, r13
     b1e:	0f 2c       	mov	r0, r15
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <ds1820_read_temp+0x670>
     b22:	95 95       	asr	r25
     b24:	87 95       	ror	r24
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <ds1820_read_temp+0x66c>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	09 f4       	brne	.+2      	; 0xb30 <ds1820_read_temp+0x67a>
     b2e:	86 c0       	rjmp	.+268    	; 0xc3c <ds1820_read_temp+0x786>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     b30:	81 b1       	in	r24, 0x01	; 1
     b32:	80 2b       	or	r24, r16
     b34:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     b36:	82 b1       	in	r24, 0x02	; 2
     b38:	81 23       	and	r24, r17
     b3a:	82 b9       	out	0x02, r24	; 2
     b3c:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     b3e:	81 b1       	in	r24, 0x01	; 1
     b40:	81 23       	and	r24, r17
     b42:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     b44:	82 b1       	in	r24, 0x02	; 2
     b46:	80 2b       	or	r24, r16
     b48:	82 b9       	out	0x02, r24	; 2
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	8a 95       	dec	r24
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <ds1820_read_temp+0x696>
     b50:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     b52:	80 b1       	in	r24, 0x00	; 0
     b54:	90 e1       	ldi	r25, 0x10	; 16
     b56:	9a 95       	dec	r25
     b58:	f1 f7       	brne	.-4      	; 0xb56 <ds1820_read_temp+0x6a0>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <ds1820_read_temp+0x6a6>
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	8c 21       	and	r24, r12
     b60:	9d 21       	and	r25, r13
     b62:	0f 2c       	mov	r0, r15
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <ds1820_read_temp+0x6b4>
     b66:	95 95       	asr	r25
     b68:	87 95       	ror	r24
     b6a:	0a 94       	dec	r0
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <ds1820_read_temp+0x6b0>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	09 f4       	brne	.+2      	; 0xb74 <ds1820_read_temp+0x6be>
     b72:	62 c0       	rjmp	.+196    	; 0xc38 <ds1820_read_temp+0x782>
	    error=ds1820_reset(used_pin);								//5. Reset
	    ds1820_wr_byte(0xCC,used_pin);  							//6. skip ROM
	    ds1820_wr_byte(0xBE,used_pin);  							//7. Read entire scratchpad 9 bytes
    
	    for (i=0; i<9; i++) {   									//8. Get scratchpad byte by byte
			scratchpad[i]=ds1820_re_byte(used_pin); 					//9. read one DS18S20 byte
     b74:	21 93       	st	Z+, r18
		}									 
	    error=ds1820_reset(used_pin);								//5. Reset
	    ds1820_wr_byte(0xCC,used_pin);  							//6. skip ROM
	    ds1820_wr_byte(0xBE,used_pin);  							//7. Read entire scratchpad 9 bytes
    
	    for (i=0; i<9; i++) {   									//8. Get scratchpad byte by byte
     b76:	e4 17       	cp	r30, r20
     b78:	f5 07       	cpc	r31, r21
     b7a:	09 f4       	brne	.+2      	; 0xb7e <ds1820_read_temp+0x6c8>
     b7c:	e1 cc       	rjmp	.-1598   	; 0x540 <ds1820_read_temp+0x8a>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     b7e:	81 b1       	in	r24, 0x01	; 1
     b80:	80 2b       	or	r24, r16
     b82:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     b84:	82 b1       	in	r24, 0x02	; 2
     b86:	81 23       	and	r24, r17
     b88:	82 b9       	out	0x02, r24	; 2
     b8a:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     b8c:	81 b1       	in	r24, 0x01	; 1
     b8e:	81 23       	and	r24, r17
     b90:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     b92:	82 b1       	in	r24, 0x02	; 2
     b94:	80 2b       	or	r24, r16
     b96:	82 b9       	out	0x02, r24	; 2
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	9a 95       	dec	r25
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <ds1820_read_temp+0x6e4>
     b9e:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     ba0:	80 b1       	in	r24, 0x00	; 0
     ba2:	90 e1       	ldi	r25, 0x10	; 16
     ba4:	9a 95       	dec	r25
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <ds1820_read_temp+0x6ee>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <ds1820_read_temp+0x6f4>
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	8c 21       	and	r24, r12
     bae:	9d 21       	and	r25, r13
     bb0:	0f 2c       	mov	r0, r15
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <ds1820_read_temp+0x702>
     bb4:	95 95       	asr	r25
     bb6:	87 95       	ror	r24
     bb8:	0a 94       	dec	r0
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <ds1820_read_temp+0x6fe>
}
//-----------------------------------------
// Read 1 byte from DS18S20
//-----------------------------------------
uint8_t ds1820_re_byte(uint8_t used_pin) {
	uint8_t rebyte =0x00;
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <ds1820_read_temp+0x70e>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     bc4:	81 b1       	in	r24, 0x01	; 1
     bc6:	80 2b       	or	r24, r16
     bc8:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     bca:	82 b1       	in	r24, 0x02	; 2
     bcc:	81 23       	and	r24, r17
     bce:	82 b9       	out	0x02, r24	; 2
     bd0:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     bd2:	81 b1       	in	r24, 0x01	; 1
     bd4:	81 23       	and	r24, r17
     bd6:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     bd8:	82 b1       	in	r24, 0x02	; 2
     bda:	80 2b       	or	r24, r16
     bdc:	82 b9       	out	0x02, r24	; 2
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	8a 95       	dec	r24
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <ds1820_read_temp+0x72a>
     be4:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     be6:	80 b1       	in	r24, 0x00	; 0
     be8:	90 e1       	ldi	r25, 0x10	; 16
     bea:	9a 95       	dec	r25
     bec:	f1 f7       	brne	.-4      	; 0xbea <ds1820_read_temp+0x734>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <ds1820_read_temp+0x73a>
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	8c 21       	and	r24, r12
     bf4:	9d 21       	and	r25, r13
     bf6:	0f 2c       	mov	r0, r15
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <ds1820_read_temp+0x748>
     bfa:	95 95       	asr	r25
     bfc:	87 95       	ror	r24
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <ds1820_read_temp+0x744>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f0       	breq	.+2      	; 0xc08 <ds1820_read_temp+0x752>
     c06:	ea ce       	rjmp	.-556    	; 0x9dc <ds1820_read_temp+0x526>
			rebyte|=(1<<i);
     c08:	22 60       	ori	r18, 0x02	; 2
     c0a:	e8 ce       	rjmp	.-560    	; 0x9dc <ds1820_read_temp+0x526>
     c0c:	20 68       	ori	r18, 0x80	; 128
	scratchpad[8]=0;
	error=ds1820_reset(used_pin);									//1. Reset
	if (error==0){
	    ds1820_wr_byte(0xCC,used_pin);  							//2. skip ROM
	    ds1820_wr_byte(0x44,used_pin);  							//3. ask for temperature conversion
	    while (ds1820_re_byte(used_pin)==0xFF && j<1000){			//4. wait until conversion is finished 
     c0e:	2f 3f       	cpi	r18, 0xFF	; 255
     c10:	09 f0       	breq	.+2      	; 0xc14 <ds1820_read_temp+0x75e>
     c12:	81 ce       	rjmp	.-766    	; 0x916 <ds1820_read_temp+0x460>
     c14:	41 50       	subi	r20, 0x01	; 1
     c16:	50 40       	sbci	r21, 0x00	; 0
     c18:	09 f4       	brne	.+2      	; 0xc1c <ds1820_read_temp+0x766>
     c1a:	7d ce       	rjmp	.-774    	; 0x916 <ds1820_read_temp+0x460>
     c1c:	00 00       	nop
     c1e:	6a cd       	rjmp	.-1324   	; 0x6f4 <ds1820_read_temp+0x23e>

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
			rebyte|=(1<<i);
     c20:	20 61       	ori	r18, 0x10	; 16
     c22:	13 ce       	rjmp	.-986    	; 0x84a <ds1820_read_temp+0x394>
     c24:	28 60       	ori	r18, 0x08	; 8
     c26:	ef cd       	rjmp	.-1058   	; 0x806 <ds1820_read_temp+0x350>
     c28:	24 60       	ori	r18, 0x04	; 4
     c2a:	cb cd       	rjmp	.-1130   	; 0x7c2 <ds1820_read_temp+0x30c>
     c2c:	22 60       	ori	r18, 0x02	; 2
     c2e:	a7 cd       	rjmp	.-1202   	; 0x77e <ds1820_read_temp+0x2c8>
     c30:	20 64       	ori	r18, 0x40	; 64
     c32:	4f ce       	rjmp	.-866    	; 0x8d2 <ds1820_read_temp+0x41c>
     c34:	20 62       	ori	r18, 0x20	; 32
     c36:	2b ce       	rjmp	.-938    	; 0x88e <ds1820_read_temp+0x3d8>
     c38:	20 68       	ori	r18, 0x80	; 128
     c3a:	9c cf       	rjmp	.-200    	; 0xb74 <ds1820_read_temp+0x6be>
     c3c:	20 64       	ori	r18, 0x40	; 64
     c3e:	78 cf       	rjmp	.-272    	; 0xb30 <ds1820_read_temp+0x67a>
     c40:	20 62       	ori	r18, 0x20	; 32
     c42:	54 cf       	rjmp	.-344    	; 0xaec <ds1820_read_temp+0x636>
     c44:	20 61       	ori	r18, 0x10	; 16
     c46:	30 cf       	rjmp	.-416    	; 0xaa8 <ds1820_read_temp+0x5f2>
     c48:	28 60       	ori	r18, 0x08	; 8
     c4a:	0c cf       	rjmp	.-488    	; 0xa64 <ds1820_read_temp+0x5ae>
     c4c:	24 60       	ori	r18, 0x04	; 4
     c4e:	e8 ce       	rjmp	.-560    	; 0xa20 <ds1820_read_temp+0x56a>

00000c50 <ds1820_init>:
	return temp;
}
//-----------------------------------------
// Initialize DS18S20
//-----------------------------------------
void  ds1820_init(uint8_t used_pin)	 {
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	18 2f       	mov	r17, r24
//----------------------------------------
// Reset DS18S20
//----------------------------------------
uint8_t ds1820_reset(uint8_t used_pin) {
	uint8_t err=100;
	DS1820_DDR |= 1<<used_pin;						// define as ouput
     c5c:	81 b1       	in	r24, 0x01	; 1
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	e2 2e       	mov	r14, r18
     c62:	f1 2c       	mov	r15, r1
     c64:	01 2e       	mov	r0, r17
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <ds1820_init+0x1c>
     c68:	ee 0c       	add	r14, r14
     c6a:	ff 1c       	adc	r15, r15
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <ds1820_init+0x18>
     c70:	de 2d       	mov	r29, r14
     c72:	8e 29       	or	r24, r14
     c74:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
     c76:	82 b1       	in	r24, 0x02	; 2
     c78:	ce 2d       	mov	r28, r14
     c7a:	c0 95       	com	r28
     c7c:	8c 23       	and	r24, r28
     c7e:	82 b9       	out	0x02, r24	; 2
     c80:	80 ea       	ldi	r24, 0xA0	; 160
     c82:	8a 95       	dec	r24
     c84:	f1 f7       	brne	.-4      	; 0xc82 <ds1820_init+0x32>
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     c86:	81 b1       	in	r24, 0x01	; 1
     c88:	8c 23       	and	r24, r28
     c8a:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;						//Pullup on
     c8c:	82 b1       	in	r24, 0x02	; 2
     c8e:	8e 29       	or	r24, r14
     c90:	82 b9       	out	0x02, r24	; 2
     c92:	96 e1       	ldi	r25, 0x16	; 22
     c94:	9a 95       	dec	r25
     c96:	f1 f7       	brne	.-4      	; 0xc94 <ds1820_init+0x44>
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     c98:	20 b1       	in	r18, 0x00	; 0
     c9a:	80 e5       	ldi	r24, 0x50	; 80
     c9c:	8a 95       	dec	r24
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <ds1820_init+0x4c>
	_delay_us(240);									// 240 us
	if((DS1820_PIN & (1<<used_pin)) == 0 ){			// short circuit --> err=2
     ca0:	80 b1       	in	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	01 2e       	mov	r0, r17
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <ds1820_init+0x5c>
     ca8:	95 95       	asr	r25
     caa:	87 95       	ror	r24
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <ds1820_init+0x58>
     cb0:	80 fd       	sbrc	r24, 0
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <ds1820_init+0x70>
	    ds1820_wr_byte(0xCC,used_pin);  							//6. skip ROM
	    ds1820_wr_byte(0xBE,used_pin);  							//7. Read entire scratchpad 9 bytes
		}
    
	   
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	08 95       	ret
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
	DS1820_PORT |= 1<<used_pin;						//Pullup on
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     cc0:	82 2f       	mov	r24, r18
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8e 21       	and	r24, r14
     cc6:	9f 21       	and	r25, r15
     cc8:	01 2e       	mov	r0, r17
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <ds1820_init+0x80>
     ccc:	95 95       	asr	r25
     cce:	87 95       	ror	r24
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <ds1820_init+0x7c>
//-----------------------------------------
void  ds1820_init(uint8_t used_pin)	 {
	uint8_t error;
	uint16_t i =0;
	error=ds1820_reset(used_pin);									//1. Reset
	if (error==0) {
     cd4:	88 23       	and	r24, r24
     cd6:	71 f7       	brne	.-36     	; 0xcb4 <ds1820_init+0x64>
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     cd8:	61 2f       	mov	r22, r17
     cda:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	61 2f       	mov	r22, r17
     ce2:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	61 2f       	mov	r22, r17
     cea:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	61 2f       	mov	r22, r17
     cf2:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	61 2f       	mov	r22, r17
     cfa:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	61 2f       	mov	r22, r17
     d02:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	61 2f       	mov	r22, r17
     d0a:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	61 2f       	mov	r22, r17
     d12:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <ds1820_init+0xc8>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <ds1820_init+0xca>
     d1a:	00 00       	nop
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	61 2f       	mov	r22, r17
     d20:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	61 2f       	mov	r22, r17
     d28:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	61 2f       	mov	r22, r17
     d30:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	61 2f       	mov	r22, r17
     d38:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	61 2f       	mov	r22, r17
     d40:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	61 2f       	mov	r22, r17
     d48:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	61 2f       	mov	r22, r17
     d50:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	61 2f       	mov	r22, r17
     d58:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <ds1820_init+0x10e>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <ds1820_init+0x110>
     d60:	00 00       	nop
     d62:	49 ee       	ldi	r20, 0xE9	; 233
     d64:	53 e0       	ldi	r21, 0x03	; 3
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     d66:	81 b1       	in	r24, 0x01	; 1
     d68:	8d 2b       	or	r24, r29
     d6a:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     d6c:	82 b1       	in	r24, 0x02	; 2
     d6e:	8c 23       	and	r24, r28
     d70:	82 b9       	out	0x02, r24	; 2
     d72:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     d74:	81 b1       	in	r24, 0x01	; 1
     d76:	8c 23       	and	r24, r28
     d78:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     d7a:	82 b1       	in	r24, 0x02	; 2
     d7c:	8d 2b       	or	r24, r29
     d7e:	82 b9       	out	0x02, r24	; 2
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	9a 95       	dec	r25
     d84:	f1 f7       	brne	.-4      	; 0xd82 <ds1820_init+0x132>
     d86:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     d88:	80 b1       	in	r24, 0x00	; 0
     d8a:	90 e1       	ldi	r25, 0x10	; 16
     d8c:	9a 95       	dec	r25
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <ds1820_init+0x13c>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <ds1820_init+0x142>
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	8e 21       	and	r24, r14
     d96:	9f 21       	and	r25, r15
     d98:	01 2e       	mov	r0, r17
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <ds1820_init+0x150>
     d9c:	95 95       	asr	r25
     d9e:	87 95       	ror	r24
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <ds1820_init+0x14c>
}
//-----------------------------------------
// Read 1 byte from DS18S20
//-----------------------------------------
uint8_t ds1820_re_byte(uint8_t used_pin) {
	uint8_t rebyte =0x00;
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	09 f0       	breq	.+2      	; 0xdac <ds1820_init+0x15c>
     daa:	20 e0       	ldi	r18, 0x00	; 0
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     dac:	81 b1       	in	r24, 0x01	; 1
     dae:	8d 2b       	or	r24, r29
     db0:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     db2:	82 b1       	in	r24, 0x02	; 2
     db4:	8c 23       	and	r24, r28
     db6:	82 b9       	out	0x02, r24	; 2
     db8:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     dba:	81 b1       	in	r24, 0x01	; 1
     dbc:	8c 23       	and	r24, r28
     dbe:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     dc0:	82 b1       	in	r24, 0x02	; 2
     dc2:	8d 2b       	or	r24, r29
     dc4:	82 b9       	out	0x02, r24	; 2
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	8a 95       	dec	r24
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <ds1820_init+0x178>
     dcc:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     dce:	80 b1       	in	r24, 0x00	; 0
     dd0:	90 e1       	ldi	r25, 0x10	; 16
     dd2:	9a 95       	dec	r25
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <ds1820_init+0x182>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <ds1820_init+0x188>
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	8e 21       	and	r24, r14
     ddc:	9f 21       	and	r25, r15
     dde:	01 2e       	mov	r0, r17
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <ds1820_init+0x196>
     de2:	95 95       	asr	r25
     de4:	87 95       	ror	r24
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <ds1820_init+0x192>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <ds1820_init+0x1a0>
     dee:	2f c1       	rjmp	.+606    	; 0x104e <ds1820_init+0x3fe>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     df0:	81 b1       	in	r24, 0x01	; 1
     df2:	8d 2b       	or	r24, r29
     df4:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     df6:	82 b1       	in	r24, 0x02	; 2
     df8:	8c 23       	and	r24, r28
     dfa:	82 b9       	out	0x02, r24	; 2
     dfc:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     dfe:	81 b1       	in	r24, 0x01	; 1
     e00:	8c 23       	and	r24, r28
     e02:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     e04:	82 b1       	in	r24, 0x02	; 2
     e06:	8d 2b       	or	r24, r29
     e08:	82 b9       	out	0x02, r24	; 2
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	8a 95       	dec	r24
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <ds1820_init+0x1bc>
     e10:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     e12:	80 b1       	in	r24, 0x00	; 0
     e14:	90 e1       	ldi	r25, 0x10	; 16
     e16:	9a 95       	dec	r25
     e18:	f1 f7       	brne	.-4      	; 0xe16 <ds1820_init+0x1c6>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <ds1820_init+0x1cc>
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	8e 21       	and	r24, r14
     e20:	9f 21       	and	r25, r15
     e22:	01 2e       	mov	r0, r17
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <ds1820_init+0x1da>
     e26:	95 95       	asr	r25
     e28:	87 95       	ror	r24
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <ds1820_init+0x1d6>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f4       	brne	.+2      	; 0xe34 <ds1820_init+0x1e4>
     e32:	21 c1       	rjmp	.+578    	; 0x1076 <ds1820_init+0x426>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     e34:	81 b1       	in	r24, 0x01	; 1
     e36:	8d 2b       	or	r24, r29
     e38:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     e3a:	82 b1       	in	r24, 0x02	; 2
     e3c:	8c 23       	and	r24, r28
     e3e:	82 b9       	out	0x02, r24	; 2
     e40:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     e42:	81 b1       	in	r24, 0x01	; 1
     e44:	8c 23       	and	r24, r28
     e46:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     e48:	82 b1       	in	r24, 0x02	; 2
     e4a:	8d 2b       	or	r24, r29
     e4c:	82 b9       	out	0x02, r24	; 2
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	8a 95       	dec	r24
     e52:	f1 f7       	brne	.-4      	; 0xe50 <ds1820_init+0x200>
     e54:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     e56:	80 b1       	in	r24, 0x00	; 0
     e58:	90 e1       	ldi	r25, 0x10	; 16
     e5a:	9a 95       	dec	r25
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <ds1820_init+0x20a>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <ds1820_init+0x210>
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	8e 21       	and	r24, r14
     e64:	9f 21       	and	r25, r15
     e66:	01 2e       	mov	r0, r17
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <ds1820_init+0x21e>
     e6a:	95 95       	asr	r25
     e6c:	87 95       	ror	r24
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <ds1820_init+0x21a>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	09 f4       	brne	.+2      	; 0xe78 <ds1820_init+0x228>
     e76:	fd c0       	rjmp	.+506    	; 0x1072 <ds1820_init+0x422>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     e78:	81 b1       	in	r24, 0x01	; 1
     e7a:	8d 2b       	or	r24, r29
     e7c:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     e7e:	82 b1       	in	r24, 0x02	; 2
     e80:	8c 23       	and	r24, r28
     e82:	82 b9       	out	0x02, r24	; 2
     e84:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     e86:	81 b1       	in	r24, 0x01	; 1
     e88:	8c 23       	and	r24, r28
     e8a:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     e8c:	82 b1       	in	r24, 0x02	; 2
     e8e:	8d 2b       	or	r24, r29
     e90:	82 b9       	out	0x02, r24	; 2
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	8a 95       	dec	r24
     e96:	f1 f7       	brne	.-4      	; 0xe94 <ds1820_init+0x244>
     e98:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     e9a:	80 b1       	in	r24, 0x00	; 0
     e9c:	90 e1       	ldi	r25, 0x10	; 16
     e9e:	9a 95       	dec	r25
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <ds1820_init+0x24e>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <ds1820_init+0x254>
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	8e 21       	and	r24, r14
     ea8:	9f 21       	and	r25, r15
     eaa:	01 2e       	mov	r0, r17
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <ds1820_init+0x262>
     eae:	95 95       	asr	r25
     eb0:	87 95       	ror	r24
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <ds1820_init+0x25e>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f4       	brne	.+2      	; 0xebc <ds1820_init+0x26c>
     eba:	d9 c0       	rjmp	.+434    	; 0x106e <ds1820_init+0x41e>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     ebc:	81 b1       	in	r24, 0x01	; 1
     ebe:	8d 2b       	or	r24, r29
     ec0:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     ec2:	82 b1       	in	r24, 0x02	; 2
     ec4:	8c 23       	and	r24, r28
     ec6:	82 b9       	out	0x02, r24	; 2
     ec8:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     eca:	81 b1       	in	r24, 0x01	; 1
     ecc:	8c 23       	and	r24, r28
     ece:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     ed0:	82 b1       	in	r24, 0x02	; 2
     ed2:	8d 2b       	or	r24, r29
     ed4:	82 b9       	out	0x02, r24	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8a 95       	dec	r24
     eda:	f1 f7       	brne	.-4      	; 0xed8 <ds1820_init+0x288>
     edc:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     ede:	80 b1       	in	r24, 0x00	; 0
     ee0:	90 e1       	ldi	r25, 0x10	; 16
     ee2:	9a 95       	dec	r25
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <ds1820_init+0x292>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <ds1820_init+0x298>
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	8e 21       	and	r24, r14
     eec:	9f 21       	and	r25, r15
     eee:	01 2e       	mov	r0, r17
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <ds1820_init+0x2a6>
     ef2:	95 95       	asr	r25
     ef4:	87 95       	ror	r24
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <ds1820_init+0x2a2>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	09 f4       	brne	.+2      	; 0xf00 <ds1820_init+0x2b0>
     efe:	b5 c0       	rjmp	.+362    	; 0x106a <ds1820_init+0x41a>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     f00:	81 b1       	in	r24, 0x01	; 1
     f02:	8d 2b       	or	r24, r29
     f04:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     f06:	82 b1       	in	r24, 0x02	; 2
     f08:	8c 23       	and	r24, r28
     f0a:	82 b9       	out	0x02, r24	; 2
     f0c:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     f0e:	81 b1       	in	r24, 0x01	; 1
     f10:	8c 23       	and	r24, r28
     f12:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     f14:	82 b1       	in	r24, 0x02	; 2
     f16:	8d 2b       	or	r24, r29
     f18:	82 b9       	out	0x02, r24	; 2
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	8a 95       	dec	r24
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <ds1820_init+0x2cc>
     f20:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     f22:	80 b1       	in	r24, 0x00	; 0
     f24:	90 e1       	ldi	r25, 0x10	; 16
     f26:	9a 95       	dec	r25
     f28:	f1 f7       	brne	.-4      	; 0xf26 <ds1820_init+0x2d6>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <ds1820_init+0x2dc>
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	8e 21       	and	r24, r14
     f30:	9f 21       	and	r25, r15
     f32:	01 2e       	mov	r0, r17
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <ds1820_init+0x2ea>
     f36:	95 95       	asr	r25
     f38:	87 95       	ror	r24
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <ds1820_init+0x2e6>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f4       	brne	.+2      	; 0xf44 <ds1820_init+0x2f4>
     f42:	91 c0       	rjmp	.+290    	; 0x1066 <ds1820_init+0x416>
//-----------------------------------------
// Read one bit from DS18S20
//-----------------------------------------
uint8_t ds1820_re_bit(uint8_t used_pin) {
	uint8_t rebit;
	DS1820_DDR |= 1<<used_pin;							// define as ouput
     f44:	81 b1       	in	r24, 0x01	; 1
     f46:	8d 2b       	or	r24, r29
     f48:	81 b9       	out	0x01, r24	; 1
  	DS1820_PORT &= ~(1<<used_pin);						//Pull low
     f4a:	82 b1       	in	r24, 0x02	; 2
     f4c:	8c 23       	and	r24, r28
     f4e:	82 b9       	out	0x02, r24	; 2
     f50:	00 00       	nop
	_delay_us(1);
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     f52:	81 b1       	in	r24, 0x01	; 1
     f54:	8c 23       	and	r24, r28
     f56:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;							//Pullup on
     f58:	82 b1       	in	r24, 0x02	; 2
     f5a:	8d 2b       	or	r24, r29
     f5c:	82 b9       	out	0x02, r24	; 2
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	8a 95       	dec	r24
     f62:	f1 f7       	brne	.-4      	; 0xf60 <ds1820_init+0x310>
     f64:	00 00       	nop
	_delay_us(10);
	rebit = (DS1820_PIN & (1<<used_pin)) >> used_pin; 	//Read bit
     f66:	80 b1       	in	r24, 0x00	; 0
     f68:	90 e1       	ldi	r25, 0x10	; 16
     f6a:	9a 95       	dec	r25
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <ds1820_init+0x31a>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <ds1820_init+0x320>
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	8e 21       	and	r24, r14
     f74:	9f 21       	and	r25, r15
     f76:	01 2e       	mov	r0, r17
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <ds1820_init+0x32e>
     f7a:	95 95       	asr	r25
     f7c:	87 95       	ror	r24
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <ds1820_init+0x32a>
	uint8_t i;

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	09 f4       	brne	.+2      	; 0xf88 <ds1820_init+0x338>
     f86:	65 c0       	rjmp	.+202    	; 0x1052 <ds1820_init+0x402>
//----------------------------------------
// Reset DS18S20
//----------------------------------------
uint8_t ds1820_reset(uint8_t used_pin) {
	uint8_t err=100;
	DS1820_DDR |= 1<<used_pin;						// define as ouput
     f88:	81 b1       	in	r24, 0x01	; 1
     f8a:	8d 2b       	or	r24, r29
     f8c:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT &= ~(1<<used_pin);					//Pull low
     f8e:	82 b1       	in	r24, 0x02	; 2
     f90:	8c 23       	and	r24, r28
     f92:	82 b9       	out	0x02, r24	; 2
     f94:	80 ea       	ldi	r24, 0xA0	; 160
     f96:	8a 95       	dec	r24
     f98:	f1 f7       	brne	.-4      	; 0xf96 <ds1820_init+0x346>
	_delay_us(480);				;					// 480 us
	DS1820_DDR &= ~(1<<used_pin);						// define as input
     f9a:	81 b1       	in	r24, 0x01	; 1
     f9c:	8c 23       	and	r24, r28
     f9e:	81 b9       	out	0x01, r24	; 1
	DS1820_PORT |= 1<<used_pin;						//Pullup on
     fa0:	82 b1       	in	r24, 0x02	; 2
     fa2:	8d 2b       	or	r24, r29
     fa4:	82 b9       	out	0x02, r24	; 2
     fa6:	96 e1       	ldi	r25, 0x16	; 22
     fa8:	9a 95       	dec	r25
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <ds1820_init+0x358>
	_delay_us(66);										// 66 us
	err = (DS1820_PIN & (1<<used_pin)) >> used_pin;	// no presence detect --> err=1 otherwise err=0
     fac:	80 b1       	in	r24, 0x00	; 0
     fae:	80 e5       	ldi	r24, 0x50	; 80
     fb0:	8a 95       	dec	r24
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <ds1820_init+0x360>
	_delay_us(240);									// 240 us
	if((DS1820_PIN & (1<<used_pin)) == 0 ){			// short circuit --> err=2
     fb4:	80 b1       	in	r24, 0x00	; 0
// Write 1 byte to DS18S20
//-----------------------------------------
void ds1820_wr_byte(uint8_t wrbyte,uint8_t used_pin) {
	uint8_t i;
	for (i=0; i < 8; i++) { // writes byte, one bit at a time
		ds1820_wr_bit((wrbyte & 0b00000001),used_pin);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	61 2f       	mov	r22, r17
     fba:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	61 2f       	mov	r22, r17
     fc2:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	61 2f       	mov	r22, r17
     fca:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	61 2f       	mov	r22, r17
     fd2:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	61 2f       	mov	r22, r17
     fda:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	61 2f       	mov	r22, r17
     fe2:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	61 2f       	mov	r22, r17
     fea:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	61 2f       	mov	r22, r17
     ff2:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <ds1820_init+0x3a8>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <ds1820_init+0x3aa>
     ffa:	00 00       	nop
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	61 2f       	mov	r22, r17
    1000:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	61 2f       	mov	r22, r17
    1008:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	61 2f       	mov	r22, r17
    1010:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	61 2f       	mov	r22, r17
    1018:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	61 2f       	mov	r22, r17
    1020:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	61 2f       	mov	r22, r17
    1028:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	61 2f       	mov	r22, r17
    1030:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	61 2f       	mov	r22, r17
    1038:	0e 94 94 00 	call	0x128	; 0x128 <ds1820_wr_bit>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <ds1820_init+0x3ee>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <ds1820_init+0x3f0>
    1040:	00 00       	nop
	    ds1820_wr_byte(0xCC,used_pin);  							//6. skip ROM
	    ds1820_wr_byte(0xBE,used_pin);  							//7. Read entire scratchpad 9 bytes
		}
    
	   
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	08 95       	ret

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
			rebyte|=(1<<i);
    104e:	22 60       	ori	r18, 0x02	; 2
    1050:	cf ce       	rjmp	.-610    	; 0xdf0 <ds1820_init+0x1a0>
    1052:	20 68       	ori	r18, 0x80	; 128
	uint16_t i =0;
	error=ds1820_reset(used_pin);									//1. Reset
	if (error==0) {
	    ds1820_wr_byte(0xCC,used_pin);  							//2. skip ROM
	    ds1820_wr_byte(0x44,used_pin);  							//3. ask for temperature conversion
	    while (ds1820_re_byte(used_pin)==0xFF && i<1000){			//4. wait until conversion is finished 
    1054:	2f 3f       	cpi	r18, 0xFF	; 255
    1056:	09 f0       	breq	.+2      	; 0x105a <ds1820_init+0x40a>
    1058:	97 cf       	rjmp	.-210    	; 0xf88 <ds1820_init+0x338>
    105a:	41 50       	subi	r20, 0x01	; 1
    105c:	50 40       	sbci	r21, 0x00	; 0
    105e:	09 f4       	brne	.+2      	; 0x1062 <ds1820_init+0x412>
    1060:	93 cf       	rjmp	.-218    	; 0xf88 <ds1820_init+0x338>
    1062:	00 00       	nop
    1064:	80 ce       	rjmp	.-768    	; 0xd66 <ds1820_init+0x116>

	for (i=0; i < 8; i++) {
		rebit=ds1820_re_bit(used_pin);
		//_delay_us(2);									//be on the save side
		if (rebit==1){
			rebyte|=(1<<i);
    1066:	20 64       	ori	r18, 0x40	; 64
    1068:	6d cf       	rjmp	.-294    	; 0xf44 <ds1820_init+0x2f4>
    106a:	20 62       	ori	r18, 0x20	; 32
    106c:	49 cf       	rjmp	.-366    	; 0xf00 <ds1820_init+0x2b0>
    106e:	20 61       	ori	r18, 0x10	; 16
    1070:	25 cf       	rjmp	.-438    	; 0xebc <ds1820_init+0x26c>
    1072:	28 60       	ori	r18, 0x08	; 8
    1074:	01 cf       	rjmp	.-510    	; 0xe78 <ds1820_init+0x228>
    1076:	24 60       	ori	r18, 0x04	; 4
    1078:	dd ce       	rjmp	.-582    	; 0xe34 <ds1820_init+0x1e4>

0000107a <LCD_WriteByteToLCD>:
/*																		*/
/* Note that this destroys the input you give it.						*/
/* Also disables interrupts so it doesn't screw up; too lazy to find a	*/
/* cleaner way of preventing screw-ups/race conditions/					*/
/************************************************************************/
void LCD_WriteByteToLCD(uint8_t byte, uint8_t flags) {
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	cli(); // Disable interrupts
    1084:	f8 94       	cli
	
	LCD_PORT |= LCD_CLK_BITMASK; // Make sure CLK is high
    1086:	11 9a       	sbi	0x02, 1	; 2
	LCD_PORT &= ~LCD_STB_BITMASK; // Set LCD enable pin to 0.
    1088:	12 98       	cbi	0x02, 2	; 2
	
	flags |= 0xF8; // First 5 bits are 1's
	
	// Loop to write the flag
	for (volatile uint8_t i = 0; i < 8; i++) {
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	99 81       	ldd	r25, Y+1	; 0x01
    108e:	98 30       	cpi	r25, 0x08	; 8
    1090:	e0 f4       	brcc	.+56     	; 0x10ca <LCD_WriteByteToLCD+0x50>
	cli(); // Disable interrupts
	
	LCD_PORT |= LCD_CLK_BITMASK; // Make sure CLK is high
	LCD_PORT &= ~LCD_STB_BITMASK; // Set LCD enable pin to 0.
	
	flags |= 0xF8; // First 5 bits are 1's
    1092:	68 6f       	ori	r22, 0xF8	; 248
	// Loop to write the flag
	for (volatile uint8_t i = 0; i < 8; i++) {
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= (((flags & 0x80) >> 0x07) << LCD_SIO) + LCD_CLK_BITMASK; // Shift out a single bit, toggle the state of clk as well. (it's low now)
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)	
    1094:	32 e0       	ldi	r19, 0x02	; 2
    1096:	91 e2       	ldi	r25, 0x21	; 33
    1098:	9a 95       	dec	r25
    109a:	f1 f7       	brne	.-4      	; 0x1098 <LCD_WriteByteToLCD+0x1e>
    109c:	00 00       	nop
	flags |= 0xF8; // First 5 bits are 1's
	
	// Loop to write the flag
	for (volatile uint8_t i = 0; i < 8; i++) {
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= (((flags & 0x80) >> 0x07) << LCD_SIO) + LCD_CLK_BITMASK; // Shift out a single bit, toggle the state of clk as well. (it's low now)
    109e:	22 b1       	in	r18, 0x02	; 2
    10a0:	96 2f       	mov	r25, r22
    10a2:	99 1f       	adc	r25, r25
    10a4:	99 27       	eor	r25, r25
    10a6:	99 1f       	adc	r25, r25
    10a8:	9e 5f       	subi	r25, 0xFE	; 254
    10aa:	92 27       	eor	r25, r18
    10ac:	92 b9       	out	0x02, r25	; 2
    10ae:	91 e2       	ldi	r25, 0x21	; 33
    10b0:	9a 95       	dec	r25
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <LCD_WriteByteToLCD+0x36>
    10b4:	00 00       	nop
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)	
    10b6:	92 b1       	in	r25, 0x02	; 2
    10b8:	93 27       	eor	r25, r19
    10ba:	92 b9       	out	0x02, r25	; 2
		flags = flags << 0x01; // Shift byte to the left 1 bit.
    10bc:	66 0f       	add	r22, r22
	LCD_PORT &= ~LCD_STB_BITMASK; // Set LCD enable pin to 0.
	
	flags |= 0xF8; // First 5 bits are 1's
	
	// Loop to write the flag
	for (volatile uint8_t i = 0; i < 8; i++) {
    10be:	99 81       	ldd	r25, Y+1	; 0x01
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	99 83       	std	Y+1, r25	; 0x01
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	98 30       	cpi	r25, 0x08	; 8
    10c8:	30 f3       	brcs	.-52     	; 0x1096 <LCD_WriteByteToLCD+0x1c>
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)	
		flags = flags << 0x01; // Shift byte to the left 1 bit.
	}
	
	// Loop to transfer the bytes
	for(volatile uint8_t i = 0; i < 7; i++) {
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	99 81       	ldd	r25, Y+1	; 0x01
    10ce:	97 30       	cpi	r25, 0x07	; 7
    10d0:	d8 f4       	brcc	.+54     	; 0x1108 <__stack+0x9>
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= (((byte & 0x80) >> 0x07) << LCD_SIO) + LCD_CLK_BITMASK; // Shift out a single bit, toggle the state of clk as well. (it's low now)
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)
    10d2:	32 e0       	ldi	r19, 0x02	; 2
    10d4:	91 e2       	ldi	r25, 0x21	; 33
    10d6:	9a 95       	dec	r25
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <LCD_WriteByteToLCD+0x5c>
    10da:	00 00       	nop
	}
	
	// Loop to transfer the bytes
	for(volatile uint8_t i = 0; i < 7; i++) {
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= (((byte & 0x80) >> 0x07) << LCD_SIO) + LCD_CLK_BITMASK; // Shift out a single bit, toggle the state of clk as well. (it's low now)
    10dc:	22 b1       	in	r18, 0x02	; 2
    10de:	98 2f       	mov	r25, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	99 27       	eor	r25, r25
    10e4:	99 1f       	adc	r25, r25
    10e6:	9e 5f       	subi	r25, 0xFE	; 254
    10e8:	92 27       	eor	r25, r18
    10ea:	92 b9       	out	0x02, r25	; 2
    10ec:	91 e2       	ldi	r25, 0x21	; 33
    10ee:	9a 95       	dec	r25
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <LCD_WriteByteToLCD+0x74>
    10f2:	00 00       	nop
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)
    10f4:	92 b1       	in	r25, 0x02	; 2
    10f6:	93 27       	eor	r25, r19
    10f8:	92 b9       	out	0x02, r25	; 2
		byte = byte << 0x01; // Shift byte to the left 1 bit.		
    10fa:	88 0f       	add	r24, r24
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)	
		flags = flags << 0x01; // Shift byte to the left 1 bit.
	}
	
	// Loop to transfer the bytes
	for(volatile uint8_t i = 0; i < 7; i++) {
    10fc:	99 81       	ldd	r25, Y+1	; 0x01
    10fe:	9f 5f       	subi	r25, 0xFF	; 255
    1100:	99 83       	std	Y+1, r25	; 0x01
    1102:	99 81       	ldd	r25, Y+1	; 0x01
    1104:	97 30       	cpi	r25, 0x07	; 7
    1106:	30 f3       	brcs	.-52     	; 0x10d4 <LCD_WriteByteToLCD+0x5a>
		_delay_us(100); // Wait 100 microseconds for the VFD.
		LCD_PORT ^= LCD_CLK_BITMASK; // Toggle clk again (It's high again)
		byte = byte << 0x01; // Shift byte to the left 1 bit.		
	}
	
	LCD_PORT ^= (LCD_STB_BITMASK); // Make STB high again
    1108:	82 b1       	in	r24, 0x02	; 2
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	89 27       	eor	r24, r25
    110e:	82 b9       	out	0x02, r24	; 2
	
	sei(); // Re-enable interrupts
    1110:	78 94       	sei
}
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <LCD_InitIO>:
/************************************************************************/
/* Initialises IO ports for the VFD										*/
/************************************************************************/
void LCD_InitIO() {
	// Configure all three pins the LCD uses as outputs.
	LCD_DDR |= LCD_STB_BITMASK | LCD_CLK_BITMASK | LCD_SIO_BITMASK;
    111a:	81 b1       	in	r24, 0x01	; 1
    111c:	87 60       	ori	r24, 0x07	; 7
    111e:	81 b9       	out	0x01, r24	; 1
}
    1120:	08 95       	ret

00001122 <LCD_Init>:

/************************************************************************/
/* Initialises the VFD with the specified brightness.					*/
/************************************************************************/
void LCD_Init(uint8_t brightness) {
	brightness &= 0x03;
    1122:	83 70       	andi	r24, 0x03	; 3
	
	// Init LCD in 2 line mode, with specified brightness
	LCD_WriteByteToLCD(0x38 | brightness, 0x00);
    1124:	88 63       	ori	r24, 0x38	; 56
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Set the cursor movement and autoincrement
	LCD_WriteByteToLCD(0x06, 0x00);
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
}
    1134:	08 95       	ret

00001136 <LCD_ResetLCD>:
/************************************************************************/
void LCD_Init(uint8_t brightness) {
	brightness &= 0x03;
	
	// Init LCD in 2 line mode, with specified brightness
	LCD_WriteByteToLCD(0x38 | brightness, 0x00);
    1136:	88 e3       	ldi	r24, 0x38	; 56
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Set the cursor movement and autoincrement
	LCD_WriteByteToLCD(0x06, 0x00);
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>

/************************************************************************/
/* Clears the entire screen and resets cursor to (0, 0).				*/
/************************************************************************/
void LCD_ClearScreen() {
	LCD_WriteByteToLCD(0x01, 0x00);
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>

/************************************************************************/
/* Resets the cursor to the home position, (0,0).						*/
/************************************************************************/
void LCD_CursorHome() {
	LCD_WriteByteToLCD(0x02, 0x00);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
/* Resets the VFD's controller.											*/
/************************************************************************/
void LCD_ResetLCD() {
	LCD_Init(0);
	LCD_ClearScreen();
}
    1156:	08 95       	ret

00001158 <LCD_ClearScreen>:

/************************************************************************/
/* Clears the entire screen and resets cursor to (0, 0).				*/
/************************************************************************/
void LCD_ClearScreen() {
	LCD_WriteByteToLCD(0x01, 0x00);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>

/************************************************************************/
/* Resets the cursor to the home position, (0,0).						*/
/************************************************************************/
void LCD_CursorHome() {
	LCD_WriteByteToLCD(0x02, 0x00);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
/* Clears the entire screen and resets cursor to (0, 0).				*/
/************************************************************************/
void LCD_ClearScreen() {
	LCD_WriteByteToLCD(0x01, 0x00);
	LCD_CursorHome(); // reset cursor to (0, 0).
}
    1168:	08 95       	ret

0000116a <LCD_PutText>:


/************************************************************************/
/* Puts text from RAM to the current cursor position.					*/
/************************************************************************/
void LCD_PutText(uint8_t x, uint8_t y, char *text) {
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ea 01       	movw	r28, r20
	// Make sure y is in range
	y &= 0x03;
	
	// Calculate DD-RAM loc (y * 0x40, plus x)
	uint8_t ddramloc = (y << 0x06) + x;
    1170:	62 95       	swap	r22
    1172:	66 0f       	add	r22, r22
    1174:	66 0f       	add	r22, r22
    1176:	60 7c       	andi	r22, 0xC0	; 192
    1178:	68 0f       	add	r22, r24
	
	// Write DD-RAM address
	LCD_WriteByteToLCD(0x80 | ddramloc, 0x00);
    117a:	86 2f       	mov	r24, r22
    117c:	80 68       	ori	r24, 0x80	; 128
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Do we have more text to write?
	while(text != 0x00) {
    1184:	20 97       	sbiw	r28, 0x00	; 0
    1186:	39 f0       	breq	.+14     	; 0x1196 <LCD_PutText+0x2c>
		// Write next character. (RS = 1, RW = 0)
		LCD_WriteByteToLCD((uint8_t) text++, 0x02);
    1188:	8c 2f       	mov	r24, r28
    118a:	21 96       	adiw	r28, 0x01	; 1
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Write DD-RAM address
	LCD_WriteByteToLCD(0x80 | ddramloc, 0x00);
	
	// Do we have more text to write?
	while(text != 0x00) {
    1192:	20 97       	sbiw	r28, 0x00	; 0
    1194:	c9 f7       	brne	.-14     	; 0x1188 <LCD_PutText+0x1e>
		// Write next character. (RS = 1, RW = 0)
		LCD_WriteByteToLCD((uint8_t) text++, 0x02);
	}
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <LCD_PutText_P>:

/************************************************************************/
/* Puts text from PROGMEM to the current cursor position.				*/
/************************************************************************/
void LCD_PutText_P(uint8_t x, uint8_t y, char *text) {
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	ea 01       	movw	r28, r20
	// Make sure y is in range
	y &= 0x03;
	
	// Calculate DD-RAM loc (y * 0x40, plus x)
	uint8_t ddramloc = (y << 0x06) + x;
    11a2:	62 95       	swap	r22
    11a4:	66 0f       	add	r22, r22
    11a6:	66 0f       	add	r22, r22
    11a8:	60 7c       	andi	r22, 0xC0	; 192
    11aa:	68 0f       	add	r22, r24
	
	// Write DD-RAM address
	LCD_WriteByteToLCD(0x80 | ddramloc, 0x00);
    11ac:	86 2f       	mov	r24, r22
    11ae:	80 68       	ori	r24, 0x80	; 128
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <LCD_PutText_P+0x20>
	
	// Do we have more text to write?
	while(pgm_read_byte(text) != 0x00) {
		// Write next character. (RS = 1, RW = 0)
		LCD_WriteByteToLCD(pgm_read_byte(text++), 0x02);
    11b4:	21 96       	adiw	r28, 0x01	; 1
    11b6:	fc 01       	movw	r30, r24
    11b8:	84 91       	lpm	r24, Z
    11ba:	62 e0       	ldi	r22, 0x02	; 2
	
	// Calculate DD-RAM loc (y * 0x40, plus x)
	uint8_t ddramloc = (y << 0x06) + x;
	
	// Write DD-RAM address
	LCD_WriteByteToLCD(0x80 | ddramloc, 0x00);
    11bc:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Do we have more text to write?
	while(pgm_read_byte(text) != 0x00) {
    11c0:	ce 01       	movw	r24, r28
    11c2:	fe 01       	movw	r30, r28
    11c4:	24 91       	lpm	r18, Z
    11c6:	22 23       	and	r18, r18
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <LCD_PutText_P+0x18>
		// Write next character. (RS = 1, RW = 0)
		LCD_WriteByteToLCD(pgm_read_byte(text++), 0x02);
	}	
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <LCD_PutChar>:


/************************************************************************/
/* Puts a character from RAM to a specific on-screen position.			*/
/************************************************************************/
void LCD_PutChar(uint8_t x, uint8_t y, char character) {
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	// Make sure y is in range
	y &= 0x03;
	
	// Calculate DD-RAM loc (y * 0x40, plus x)
	uint8_t ddramloc = (y << 0x06) + x; 
    11da:	62 95       	swap	r22
    11dc:	66 0f       	add	r22, r22
    11de:	66 0f       	add	r22, r22
    11e0:	60 7c       	andi	r22, 0xC0	; 192
    11e2:	68 0f       	add	r22, r24
	
	// Write DD-RAM address
	LCD_WriteByteToLCD(0x80 | ddramloc, 0x00);
    11e4:	86 2f       	mov	r24, r22
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	49 83       	std	Y+1, r20	; 0x01
    11ec:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Write character to DD-RAM (RS is set to 1, RW set 0)
	LCD_WriteByteToLCD(character, 0x02);
    11f0:	49 81       	ldd	r20, Y+1	; 0x01
    11f2:	84 2f       	mov	r24, r20
    11f4:	62 e0       	ldi	r22, 0x02	; 2
    11f6:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
}
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <LCD_PutChar_P>:

/************************************************************************/
/* Puts a character from PROGMEM to a specific on-screen position.		*/
/************************************************************************/
void LCD_PutChar_P(uint8_t x, uint8_t y, char character) {
    1202:	cf 93       	push	r28
	// Just call the RAM version of this routine.
	LCD_PutChar(x, y, pgm_read_byte(character));
    1204:	e4 2f       	mov	r30, r20
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	c4 91       	lpm	r28, Z
void LCD_PutChar(uint8_t x, uint8_t y, char character) {
	// Make sure y is in range
	y &= 0x03;
	
	// Calculate DD-RAM loc (y * 0x40, plus x)
	uint8_t ddramloc = (y << 0x06) + x; 
    120a:	62 95       	swap	r22
    120c:	66 0f       	add	r22, r22
    120e:	66 0f       	add	r22, r22
    1210:	60 7c       	andi	r22, 0xC0	; 192
    1212:	68 0f       	add	r22, r24
	
	// Write DD-RAM address
	LCD_WriteByteToLCD(0x80 | ddramloc, 0x00);
    1214:	86 2f       	mov	r24, r22
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	// Write character to DD-RAM (RS is set to 1, RW set 0)
	LCD_WriteByteToLCD(character, 0x02);
    121e:	8c 2f       	mov	r24, r28
    1220:	62 e0       	ldi	r22, 0x02	; 2
    1222:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
/* Puts a character from PROGMEM to a specific on-screen position.		*/
/************************************************************************/
void LCD_PutChar_P(uint8_t x, uint8_t y, char character) {
	// Just call the RAM version of this routine.
	LCD_PutChar(x, y, pgm_read_byte(character));
}	
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <LCD_SetCGRAM>:


/************************************************************************/
/* Sets a specific custom character in CG-RAM from PROGMEM.				*/
/************************************************************************/
void LCD_SetCGRAM(uint8_t character, char *data) {
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	8b 01       	movw	r16, r22
	// Make sure value is in range
	character &= 0x07;
    123a:	87 70       	andi	r24, 0x07	; 7
	
	// Write the CGRAM address
	LCD_WriteByteToLCD(0x40 | (character << 0x03), 0x00);
    123c:	88 0f       	add	r24, r24
    123e:	88 0f       	add	r24, r24
    1240:	88 0f       	add	r24, r24
    1242:	80 64       	ori	r24, 0x40	; 64
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	
	for (volatile uint8_t i = 0; i < 8; i++) {
    124a:	19 82       	std	Y+1, r1	; 0x01
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	68 f4       	brcc	.+26     	; 0x126c <LCD_SetCGRAM+0x42>
		// Write a character of the CGRAM data (RS = 1, RW = 0)
		LCD_WriteByteToLCD(pgm_read_byte(data++), 0x02);
    1252:	f8 01       	movw	r30, r16
    1254:	0f 5f       	subi	r16, 0xFF	; 255
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	84 91       	lpm	r24, Z
    125a:	62 e0       	ldi	r22, 0x02	; 2
    125c:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
	character &= 0x07;
	
	// Write the CGRAM address
	LCD_WriteByteToLCD(0x40 | (character << 0x03), 0x00);
	
	for (volatile uint8_t i = 0; i < 8; i++) {
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	88 30       	cpi	r24, 0x08	; 8
    126a:	98 f3       	brcs	.-26     	; 0x1252 <LCD_SetCGRAM+0x28>
		// Write a character of the CGRAM data (RS = 1, RW = 0)
		LCD_WriteByteToLCD(pgm_read_byte(data++), 0x02);
	}
}
    126c:	0f 90       	pop	r0
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <LCD_CursorHome>:

/************************************************************************/
/* Resets the cursor to the home position, (0,0).						*/
/************************************************************************/
void LCD_CursorHome() {
	LCD_WriteByteToLCD(0x02, 0x00);
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
}
    1280:	08 95       	ret

00001282 <LCD_SetCursorPos>:
/************************************************************************/
/* Sets the cursor's position to the specified X and Y coordinates.		*/
/************************************************************************/
void LCD_SetCursorPos(uint8_t x, uint8_t y) {
	// TODO: Implement	
}
    1282:	08 95       	ret

00001284 <LCD_SetDisplayState>:
/************************************************************************/
/* Sets the LCD's internal state, such as disable/enable display, cursor*/
/* display, and the cursor blinking.									*/
/************************************************************************/
void LCD_SetDisplayState(uint8_t dispOn, uint8_t cursorOn, uint8_t cursorBlink) {
	LCD_WriteByteToLCD(0x08 | ((dispOn & 0x01) << 0x02) | ((cursorOn & 0x01) << 0x01) | (cursorBlink & 0x01), 0x00);
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	21 70       	andi	r18, 0x01	; 1
    128a:	30 70       	andi	r19, 0x00	; 0
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	41 70       	andi	r20, 0x01	; 1
    1296:	42 2b       	or	r20, r18
    1298:	48 60       	ori	r20, 0x08	; 8
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	61 70       	andi	r22, 0x01	; 1
    129e:	70 70       	andi	r23, 0x00	; 0
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	84 2f       	mov	r24, r20
    12a6:	86 2b       	or	r24, r22
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_WriteByteToLCD>
    12ae:	08 95       	ret

000012b0 <InitSPI>:
	// Enable receive interrupt
	UCSR0B |= (1 << RXCIE0);
}

void InitSPI() {
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Enable SPI with SCK = FCK/16
    12b0:	81 e5       	ldi	r24, 0x51	; 81
    12b2:	8c bd       	out	0x2c, r24	; 44
	DDRB |= (1 << PB7) | (1 << PB5); // SCK and MOSI as outputs
    12b4:	84 b1       	in	r24, 0x04	; 4
    12b6:	80 6a       	ori	r24, 0xA0	; 160
    12b8:	84 b9       	out	0x04, r24	; 4
}
    12ba:	08 95       	ret

000012bc <InitInterrupts>:

void InitInterrupts() {
	PCMSK1 |= (1 << PINB1); // Enable pin B1 on-change interrupt
    12bc:	ec e6       	ldi	r30, 0x6C	; 108
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	82 60       	ori	r24, 0x02	; 2
    12c4:	80 83       	st	Z, r24
	PCICR |= 0x02; // Enable interrupts for pins 9-16.
    12c6:	e8 e6       	ldi	r30, 0x68	; 104
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	80 83       	st	Z, r24
}
    12d0:	08 95       	ret

000012d2 <updateCaseTemp>:
/************************************************************************/
/* Various utility interface routines.									*/
/************************************************************************/

void updateCaseTemp() {
	temp_case = ds1820_read_temp(TEMP_CASE_PIN);
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ds1820_read_temp>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	80 93 12 01 	sts	0x0112, r24
    12e0:	90 93 13 01 	sts	0x0113, r25
    12e4:	a0 93 14 01 	sts	0x0114, r26
    12e8:	b0 93 15 01 	sts	0x0115, r27
    12ec:	08 95       	ret

000012ee <InitIOPorts>:
    }
}

void InitIOPorts() {
	// Initialize the LCD IO ports
	LCD_InitIO();
    12ee:	0e 94 8d 08 	call	0x111a	; 0x111a <LCD_InitIO>

void InitUART() {
	int baud = 19200;
	
	// Set baud rate (19200 bps at 20 MHz clock)
	UBRR0H = (unsigned char) (baud>>8);
    12f2:	8b e4       	ldi	r24, 0x4B	; 75
    12f4:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char) baud;
    12f8:	10 92 c4 00 	sts	0x00C4, r1
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    12fc:	e1 ec       	ldi	r30, 0xC1	; 193
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	88 e1       	ldi	r24, 0x18	; 24
    1302:	80 83       	st	Z, r24
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1304:	8e e0       	ldi	r24, 0x0E	; 14
    1306:	80 93 c2 00 	sts	0x00C2, r24
	
	// Enable receive interrupt
	UCSR0B |= (1 << RXCIE0);
    130a:	80 81       	ld	r24, Z
    130c:	80 68       	ori	r24, 0x80	; 128
    130e:	80 83       	st	Z, r24
void InitIOPorts() {
	// Initialize the LCD IO ports
	LCD_InitIO();
	
	InitUART();
	InitSPI();
    1310:	0e 94 58 09 	call	0x12b0	; 0x12b0 <InitSPI>
	InitInterrupts();
    1314:	0e 94 5e 09 	call	0x12bc	; 0x12bc <InitInterrupts>
	
	// Initialise our rotary encoder; takes care of setting the timer.
	rotary_init();
    1318:	0e 94 33 0a 	call	0x1466	; 0x1466 <rotary_init>
	rotary_resetStatus();
    131c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <rotary_resetStatus>
	
	// Configure IO ports for other peripherals
	CHRelayDDR |= (1 << CH1Relay) | (1 << CH2Relay); // Relay pins as outputs
    1320:	8a b1       	in	r24, 0x0a	; 10
    1322:	80 63       	ori	r24, 0x30	; 48
    1324:	8a b9       	out	0x0a, r24	; 10
	CHLEDDDR |= (1 << CH1LED) | (1 << CH2LED); // LED pins as outputs
    1326:	8a b1       	in	r24, 0x0a	; 10
    1328:	8c 60       	ori	r24, 0x0C	; 12
    132a:	8a b9       	out	0x0a, r24	; 10
	SPI_CS_DDR |= (1 << SPI_CS_ADC) | (1 << SPI_CS_CH1) | (1 << SPI_CS_CH2); // SPI CS outputs
    132c:	84 b1       	in	r24, 0x04	; 4
    132e:	8c 61       	ori	r24, 0x1C	; 28
    1330:	84 b9       	out	0x04, r24	; 4
	
	DDRD |= (1 << PD6) | (1 << PD7); // FAN PWM and speaker output
    1332:	8a b1       	in	r24, 0x0a	; 10
    1334:	80 6c       	ori	r24, 0xC0	; 192
    1336:	8a b9       	out	0x0a, r24	; 10
	
	PORTA |= (1 << PA4) | (1 << PA5) | (1 << PA6) | (1 << PA7); // pull-ups on switch inputs
    1338:	82 b1       	in	r24, 0x02	; 2
    133a:	80 6f       	ori	r24, 0xF0	; 240
    133c:	82 b9       	out	0x02, r24	; 2
	DDRA |= (1 << PA4) | (1 << PA5) | (1 << PA6) | (1 << PA7); // switch inputs
    133e:	81 b1       	in	r24, 0x01	; 1
    1340:	80 6f       	ori	r24, 0xF0	; 240
    1342:	81 b9       	out	0x01, r24	; 1
	
	DDRB &= ~(1 << PB1); // Make sure PB1 is an input.
    1344:	21 98       	cbi	0x04, 1	; 4
	// Initialise temperature sensors
	ds1820_init(TEMP_CASE_PIN);
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	0e 94 28 06 	call	0xc50	; 0xc50 <ds1820_init>
	
	sei(); // Enable interrupts
    134c:	78 94       	sei
}	
    134e:	08 95       	ret

00001350 <InitUART>:

void InitUART() {
	int baud = 19200;
	
	// Set baud rate (19200 bps at 20 MHz clock)
	UBRR0H = (unsigned char) (baud>>8);
    1350:	8b e4       	ldi	r24, 0x4B	; 75
    1352:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char) baud;
    1356:	10 92 c4 00 	sts	0x00C4, r1
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    135a:	e1 ec       	ldi	r30, 0xC1	; 193
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	88 e1       	ldi	r24, 0x18	; 24
    1360:	80 83       	st	Z, r24
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    1362:	8e e0       	ldi	r24, 0x0E	; 14
    1364:	80 93 c2 00 	sts	0x00C2, r24
	
	// Enable receive interrupt
	UCSR0B |= (1 << RXCIE0);
    1368:	80 81       	ld	r24, Z
    136a:	80 68       	ori	r24, 0x80	; 128
    136c:	80 83       	st	Z, r24
}
    136e:	08 95       	ret

00001370 <__vector_5>:
/************************************************************************/
/* Voltage/current measurement stuff									*/
/************************************************************************/

// Called when there is a state change in the !ADC_RDY! input.
ISR(PCINT1_vect, ISR_BLOCK) {
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	8f 93       	push	r24
	// We have data ready.
	if(PORTB & (1 << PINB1) == 0) {
    137c:	85 b1       	in	r24, 0x05	; 5
		
	} else {
		// The input transitioned back to high -- ignore this.
	}
}
    137e:	8f 91       	pop	r24
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_20>:

/************************************************************************/
/* USART Interrupt Handler Routines	(For receive)						*/
/************************************************************************/

ISR(USART0_RX_vect, ISR_BLOCK) {
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
	// Read a byte from the FIFO into our buffer, increment counter.
	UART0_readBuffer[UART0_curReadBuffPos] = UDR0;
    139c:	80 91 16 01 	lds	r24, 0x0116
    13a0:	90 91 c6 00 	lds	r25, 0x00C6
    13a4:	e7 e1       	ldi	r30, 0x17	; 23
    13a6:	f1 e0       	ldi	r31, 0x01	; 1
    13a8:	e8 0f       	add	r30, r24
    13aa:	f1 1d       	adc	r31, r1
    13ac:	90 83       	st	Z, r25
	UART0_curReadBuffPos++;
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	80 93 16 01 	sts	0x0116, r24
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	9f 91       	pop	r25
    13ba:	8f 91       	pop	r24
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <USART_SendByte>:
/* USART Interface Routines												*/
/************************************************************************/

void USART_SendByte(char character) {
	// Wait until the USART is ready to accept more data.
	while ((UCSR0A & (1 << UDRE0)) == 0) {};
    13c6:	90 91 c0 00 	lds	r25, 0x00C0
    13ca:	95 ff       	sbrs	r25, 5
    13cc:	fc cf       	rjmp	.-8      	; 0x13c6 <USART_SendByte>

	// Send out the character
	UDR0 = character;
    13ce:	80 93 c6 00 	sts	0x00C6, r24
}
    13d2:	08 95       	ret

000013d4 <USART_SendChars_P>:

void USART_SendChars_P(char *string) {
	while(pgm_read_byte(string) != 0x00) {
    13d4:	9c 01       	movw	r18, r24
    13d6:	fc 01       	movw	r30, r24
    13d8:	44 91       	lpm	r20, Z
    13da:	44 23       	and	r20, r20
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <USART_SendChars_P+0x1e>
		USART_SendByte(pgm_read_byte(string++));	
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	f9 01       	movw	r30, r18
    13e2:	24 91       	lpm	r18, Z
/* USART Interface Routines												*/
/************************************************************************/

void USART_SendByte(char character) {
	// Wait until the USART is ready to accept more data.
	while ((UCSR0A & (1 << UDRE0)) == 0) {};
    13e4:	30 91 c0 00 	lds	r19, 0x00C0
    13e8:	35 ff       	sbrs	r19, 5
    13ea:	fc cf       	rjmp	.-8      	; 0x13e4 <USART_SendChars_P+0x10>

	// Send out the character
	UDR0 = character;
    13ec:	20 93 c6 00 	sts	0x00C6, r18
    13f0:	f1 cf       	rjmp	.-30     	; 0x13d4 <USART_SendChars_P>
    13f2:	08 95       	ret

000013f4 <USART_SendChars>:
	while(pgm_read_byte(string) != 0x00) {
		USART_SendByte(pgm_read_byte(string++));	
	}
}

void USART_SendChars(char *string) {
    13f4:	fc 01       	movw	r30, r24
	while(*string != 0x00) {
    13f6:	90 81       	ld	r25, Z
    13f8:	99 23       	and	r25, r25
    13fa:	51 f0       	breq	.+20     	; 0x1410 <USART_SendChars+0x1c>
	while(pgm_read_byte(string) != 0x00) {
		USART_SendByte(pgm_read_byte(string++));	
	}
}

void USART_SendChars(char *string) {
    13fc:	31 96       	adiw	r30, 0x01	; 1
/* USART Interface Routines												*/
/************************************************************************/

void USART_SendByte(char character) {
	// Wait until the USART is ready to accept more data.
	while ((UCSR0A & (1 << UDRE0)) == 0) {};
    13fe:	80 91 c0 00 	lds	r24, 0x00C0
    1402:	85 ff       	sbrs	r24, 5
    1404:	fc cf       	rjmp	.-8      	; 0x13fe <USART_SendChars+0xa>

	// Send out the character
	UDR0 = character;
    1406:	90 93 c6 00 	sts	0x00C6, r25
		USART_SendByte(pgm_read_byte(string++));	
	}
}

void USART_SendChars(char *string) {
	while(*string != 0x00) {
    140a:	91 91       	ld	r25, Z+
    140c:	99 23       	and	r25, r25
    140e:	b9 f7       	brne	.-18     	; 0x13fe <USART_SendChars+0xa>
    1410:	08 95       	ret

00001412 <SPI_ReceiveChar>:
/* SPI Interface Routines												*/
/************************************************************************/

char SPI_ReceiveChar(void) {
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
    1412:	0d b4       	in	r0, 0x2d	; 45
    1414:	07 fe       	sbrs	r0, 7
    1416:	fd cf       	rjmp	.-6      	; 0x1412 <SPI_ReceiveChar>
	// Return Data Register
	return SPDR;
    1418:	8e b5       	in	r24, 0x2e	; 46
}
    141a:	08 95       	ret

0000141c <SPI_SendChar>:

void SPI_SendChar(char cData) {
	// Start transmission
	SPDR = cData;
    141c:	8e bd       	out	0x2e, r24	; 46
	// Wait for the transmission to complete
	while(! (SPSR & (1 << SPIF)));
    141e:	0d b4       	in	r0, 0x2d	; 45
    1420:	07 fe       	sbrs	r0, 7
    1422:	fd cf       	rjmp	.-6      	; 0x141e <SPI_SendChar+0x2>
}
    1424:	08 95       	ret

00001426 <SPI_SendChars>:

void SPI_SendChars(char *string) {
    1426:	fc 01       	movw	r30, r24
	while(*string != 0x00) {
    1428:	81 91       	ld	r24, Z+
    142a:	88 23       	and	r24, r24
    142c:	49 f0       	breq	.+18     	; 0x1440 <SPI_SendChars+0x1a>
	SPDR = cData;
	// Wait for the transmission to complete
	while(! (SPSR & (1 << SPIF)));
}

void SPI_SendChars(char *string) {
    142e:	8e 2f       	mov	r24, r30
    1430:	81 50       	subi	r24, 0x01	; 1
	return SPDR;
}

void SPI_SendChar(char cData) {
	// Start transmission
	SPDR = cData;
    1432:	8e bd       	out	0x2e, r24	; 46
	// Wait for the transmission to complete
	while(! (SPSR & (1 << SPIF)));
    1434:	0d b4       	in	r0, 0x2d	; 45
    1436:	07 fe       	sbrs	r0, 7
    1438:	fd cf       	rjmp	.-6      	; 0x1434 <SPI_SendChars+0xe>
}

void SPI_SendChars(char *string) {
	while(*string != 0x00) {
    143a:	81 91       	ld	r24, Z+
    143c:	88 23       	and	r24, r24
    143e:	b9 f7       	brne	.-18     	; 0x142e <SPI_SendChars+0x8>
		SPI_SendChar(string++);
	}
}
    1440:	08 95       	ret

00001442 <SPI_SendChars_P>:

void SPI_SendChars_P(char *string) {
	while(pgm_read_byte(string) != 0x00) {
    1442:	9c 01       	movw	r18, r24
    1444:	fc 01       	movw	r30, r24
    1446:	44 91       	lpm	r20, Z
    1448:	44 23       	and	r20, r20
    144a:	61 f0       	breq	.+24     	; 0x1464 <SPI_SendChars_P+0x22>
		SPI_SendChar(pgm_read_byte(string++));
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	f9 01       	movw	r30, r18
    1450:	24 91       	lpm	r18, Z
	return SPDR;
}

void SPI_SendChar(char cData) {
	// Start transmission
	SPDR = cData;
    1452:	2e bd       	out	0x2e, r18	; 46
	// Wait for the transmission to complete
	while(! (SPSR & (1 << SPIF)));
    1454:	0d b4       	in	r0, 0x2d	; 45
    1456:	07 fe       	sbrs	r0, 7
    1458:	fd cf       	rjmp	.-6      	; 0x1454 <SPI_SendChars_P+0x12>
		SPI_SendChar(string++);
	}
}

void SPI_SendChars_P(char *string) {
	while(pgm_read_byte(string) != 0x00) {
    145a:	9c 01       	movw	r18, r24
    145c:	fc 01       	movw	r30, r24
    145e:	44 91       	lpm	r20, Z
    1460:	44 23       	and	r20, r20
    1462:	a1 f7       	brne	.-24     	; 0x144c <SPI_SendChars_P+0xa>
		SPI_SendChar(pgm_read_byte(string++));
	}
}
    1464:	08 95       	ret

00001466 <rotary_init>:
/************************************************************************/
/* Initialise IO ports and timer.										*/
/************************************************************************/
void rotary_init(void) {
	//set pins as input
	ROTDDR &= ~((1<<ROTPA)|(1<<ROTPB)|(1<<ROTPBUTTON));
    1466:	81 b1       	in	r24, 0x01	; 1
    1468:	8f 78       	andi	r24, 0x8F	; 143
    146a:	81 b9       	out	0x01, r24	; 1
	//enable interrnal pullups;
	ROTPORT |= (1<<ROTPA)|(1<<ROTPB)|(1<<ROTPBUTTON);
    146c:	82 b1       	in	r24, 0x02	; 2
    146e:	80 67       	ori	r24, 0x70	; 112
    1470:	82 b9       	out	0x02, r24	; 2
	
	// Set up our timer.
	TCCR0A = 0x00; // normal port operation, no outputs to pins.
    1472:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS22) | (1<<CS20); //prescaler of 1024
    1474:	85 b5       	in	r24, 0x25	; 37
    1476:	85 60       	ori	r24, 0x05	; 5
    1478:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0xC3; // Interrupt frequency of 100Hz at 20 MHz CPU clock
    147a:	83 ec       	ldi	r24, 0xC3	; 195
    147c:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << TOIE0); //Enable Timer0 Overflow interrupts
    147e:	ee e6       	ldi	r30, 0x6E	; 110
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	81 60       	ori	r24, 0x01	; 1
    1486:	80 83       	st	Z, r24
}
    1488:	08 95       	ret

0000148a <rotary_checkStatus>:

/************************************************************************/
/* Check rotary encoder status.											*/
/************************************************************************/
void rotary_checkStatus(void) {
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	00 d0       	rcall	.+0      	; 0x1490 <rotary_checkStatus+0x6>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
//check if rotation is left
 	if(ROTA & (!wait)) {
    1494:	80 b1       	in	r24, 0x00	; 0
    1496:	40 91 10 01 	lds	r20, 0x0110
    149a:	84 fd       	sbrc	r24, 4
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <rotary_checkStatus+0x1a>
    149e:	44 23       	and	r20, r20
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <rotary_checkStatus+0x1a>
    14a2:	49 c0       	rjmp	.+146    	; 0x1536 <rotary_checkStatus+0xac>
    14a4:	24 2f       	mov	r18, r20
    14a6:	30 e0       	ldi	r19, 0x00	; 0
		wait = 1;
	} 
	
	if (ROTB & ROTA & (wait)) {
    14a8:	50 b1       	in	r21, 0x00	; 0
    14aa:	80 b1       	in	r24, 0x00	; 0
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	84 fd       	sbrc	r24, 4
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	55 fd       	sbrc	r21, 5
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	89 23       	and	r24, r25
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	82 23       	and	r24, r18
    14be:	93 23       	and	r25, r19
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <rotary_checkStatus+0x3c>
    14c4:	3f c0       	rjmp	.+126    	; 0x1544 <rotary_checkStatus+0xba>
		rotarystatus = 2;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	80 93 11 01 	sts	0x0111, r24
		wait = 2;
    14cc:	80 93 10 01 	sts	0x0110, r24
    14d0:	21 e0       	ldi	r18, 0x01	; 1
    14d2:	30 e0       	ldi	r19, 0x00	; 0
	} else if(ROTA & (!ROTB) & wait) {
		rotarystatus = 1;
		wait = 2;	
	}
	
	if ((!ROTA) & !(ROTB) & (wait==2)) {
    14d4:	40 b1       	in	r20, 0x00	; 0
    14d6:	80 b1       	in	r24, 0x00	; 0
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	85 ff       	sbrs	r24, 5
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	44 ff       	sbrs	r20, 4
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	89 23       	and	r24, r25
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	82 23       	and	r24, r18
    14ea:	93 23       	and	r25, r19
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <rotary_checkStatus+0x6a>
		wait=0;
    14f0:	10 92 10 01 	sts	0x0110, r1
	}
	
	//check button status
	if (ROTCLICK) {
    14f4:	80 b1       	in	r24, 0x00	; 0
    14f6:	86 fd       	sbrc	r24, 6
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <rotary_checkStatus+0xa2>
		for(volatile uint16_t x=0; x < 0xFFF; x++) {
    14fa:	1a 82       	std	Y+2, r1	; 0x02
    14fc:	19 82       	std	Y+1, r1	; 0x01
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	2f e0       	ldi	r18, 0x0F	; 15
    1504:	8f 3f       	cpi	r24, 0xFF	; 255
    1506:	92 07       	cpc	r25, r18
    1508:	58 f4       	brcc	.+22     	; 0x1520 <rotary_checkStatus+0x96>
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	2f e0       	ldi	r18, 0x0F	; 15
    151a:	8f 3f       	cpi	r24, 0xFF	; 255
    151c:	92 07       	cpc	r25, r18
    151e:	a8 f3       	brcs	.-22     	; 0x150a <rotary_checkStatus+0x80>
			
		}
		
		if (ROTCLICK) {
    1520:	80 b1       	in	r24, 0x00	; 0
    1522:	86 fd       	sbrc	r24, 6
    1524:	03 c0       	rjmp	.+6      	; 0x152c <rotary_checkStatus+0xa2>
			rotarystatus = 4;
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	80 93 11 01 	sts	0x0111, r24
		}
	}		
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret
/* Check rotary encoder status.											*/
/************************************************************************/
void rotary_checkStatus(void) {
//check if rotation is left
 	if(ROTA & (!wait)) {
		wait = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 10 01 	sts	0x0110, r24
    153c:	21 e0       	ldi	r18, 0x01	; 1
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	b2 cf       	rjmp	.-156    	; 0x14a8 <rotary_checkStatus+0x1e>
	} 
	
	if (ROTB & ROTA & (wait)) {
		rotarystatus = 2;
		wait = 2;
	} else if(ROTA & (!ROTB) & wait) {
    1544:	50 b1       	in	r21, 0x00	; 0
    1546:	80 b1       	in	r24, 0x00	; 0
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	85 ff       	sbrs	r24, 5
    154c:	22 c0       	rjmp	.+68     	; 0x1592 <rotary_checkStatus+0x108>
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	54 fd       	sbrc	r21, 4
    1552:	17 c0       	rjmp	.+46     	; 0x1582 <rotary_checkStatus+0xf8>
    1554:	89 23       	and	r24, r25
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	82 23       	and	r24, r18
    155a:	93 23       	and	r25, r19
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	49 f0       	breq	.+18     	; 0x1572 <rotary_checkStatus+0xe8>
		rotarystatus = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 11 01 	sts	0x0111, r24
		wait = 2;	
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	80 93 10 01 	sts	0x0110, r24
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	b1 cf       	rjmp	.-158    	; 0x14d4 <rotary_checkStatus+0x4a>
	} 
	
	if (ROTB & ROTA & (wait)) {
		rotarystatus = 2;
		wait = 2;
	} else if(ROTA & (!ROTB) & wait) {
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	42 30       	cpi	r20, 0x02	; 2
    1578:	09 f4       	brne	.+2      	; 0x157c <rotary_checkStatus+0xf2>
    157a:	ac cf       	rjmp	.-168    	; 0x14d4 <rotary_checkStatus+0x4a>
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	a9 cf       	rjmp	.-174    	; 0x14d4 <rotary_checkStatus+0x4a>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	89 23       	and	r24, r25
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	82 23       	and	r24, r18
    158a:	93 23       	and	r25, r19
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	41 f7       	brne	.-48     	; 0x1560 <rotary_checkStatus+0xd6>
    1590:	f0 cf       	rjmp	.-32     	; 0x1572 <rotary_checkStatus+0xe8>
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	54 ff       	sbrs	r21, 4
    1598:	dd cf       	rjmp	.-70     	; 0x1554 <rotary_checkStatus+0xca>
    159a:	f3 cf       	rjmp	.-26     	; 0x1582 <rotary_checkStatus+0xf8>

0000159c <rotary_getStatus>:
/*																		*/
/* 1 = turned left, 2 = turned right, 4 = centre button.				*/
/************************************************************************/
uint8_t rotary_getStatus(void) {
	return rotarystatus;
}
    159c:	80 91 11 01 	lds	r24, 0x0111
    15a0:	08 95       	ret

000015a2 <rotary_resetStatus>:

/************************************************************************/
/* Reset the rotary encoder status.										*/
/************************************************************************/
void rotary_resetStatus(void) {
	rotarystatus=0;
    15a2:	10 92 11 01 	sts	0x0111, r1
}
    15a6:	08 95       	ret

000015a8 <__vector_18>:

/************************************************************************/
/* ISR for rotary encoder reads											*/
/************************************************************************/
ISR(TIMER0_OVF_vect, ISR_BLOCK) {
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	2f 93       	push	r18
    15b4:	3f 93       	push	r19
    15b6:	4f 93       	push	r20
    15b8:	5f 93       	push	r21
    15ba:	6f 93       	push	r22
    15bc:	7f 93       	push	r23
    15be:	8f 93       	push	r24
    15c0:	9f 93       	push	r25
    15c2:	af 93       	push	r26
    15c4:	bf 93       	push	r27
    15c6:	ef 93       	push	r30
    15c8:	ff 93       	push	r31
	// Check rotary encoder status.
	rotary_checkStatus();
    15ca:	0e 94 45 0a 	call	0x148a	; 0x148a <rotary_checkStatus>
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <main>:
/************************************************************************/
/* Main routine															*/
/************************************************************************/

int main(void) {
	InitIOPorts();
    15f0:	0e 94 77 09 	call	0x12ee	; 0x12ee <InitIOPorts>
    15f4:	09 e6       	ldi	r16, 0x69	; 105
    15f6:	19 e0       	ldi	r17, 0x09	; 9
    15f8:	c0 e0       	ldi	r28, 0x00	; 0
    15fa:	d1 e0       	ldi	r29, 0x01	; 1
	
    while(1) {
		updateCaseTemp();
    15fc:	f8 01       	movw	r30, r16
    15fe:	09 95       	icall
		printf("Case Temp: %f\n", temp_case);
    1600:	00 d0       	rcall	.+0      	; 0x1602 <main+0x12>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <main+0x14>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <main+0x16>
    1606:	ad b7       	in	r26, 0x3d	; 61
    1608:	be b7       	in	r27, 0x3e	; 62
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	dc 93       	st	X, r29
    160e:	ce 93       	st	-X, r28
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	80 91 12 01 	lds	r24, 0x0112
    1616:	90 91 13 01 	lds	r25, 0x0113
    161a:	a0 91 14 01 	lds	r26, 0x0114
    161e:	b0 91 15 01 	lds	r27, 0x0115
    1622:	ed b7       	in	r30, 0x3d	; 61
    1624:	fe b7       	in	r31, 0x3e	; 62
    1626:	83 83       	std	Z+3, r24	; 0x03
    1628:	94 83       	std	Z+4, r25	; 0x04
    162a:	a5 83       	std	Z+5, r26	; 0x05
    162c:	b6 83       	std	Z+6, r27	; 0x06
    162e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1632:	8f e7       	ldi	r24, 0x7F	; 127
    1634:	9a e1       	ldi	r25, 0x1A	; 26
    1636:	a6 e0       	ldi	r26, 0x06	; 6
    1638:	81 50       	subi	r24, 0x01	; 1
    163a:	90 40       	sbci	r25, 0x00	; 0
    163c:	a0 40       	sbci	r26, 0x00	; 0
    163e:	e1 f7       	brne	.-8      	; 0x1638 <main+0x48>
    1640:	00 c0       	rjmp	.+0      	; 0x1642 <main+0x52>
    1642:	00 00       	nop
    1644:	ad b7       	in	r26, 0x3d	; 61
    1646:	be b7       	in	r27, 0x3e	; 62
    1648:	16 96       	adiw	r26, 0x06	; 6
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	be bf       	out	0x3e, r27	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	ad bf       	out	0x3d, r26	; 61
    1654:	d3 cf       	rjmp	.-90     	; 0x15fc <main+0xc>

00001656 <__subsf3>:
    1656:	50 58       	subi	r21, 0x80	; 128

00001658 <__addsf3>:
    1658:	bb 27       	eor	r27, r27
    165a:	aa 27       	eor	r26, r26
    165c:	0e d0       	rcall	.+28     	; 0x167a <__addsf3x>
    165e:	58 c1       	rjmp	.+688    	; 0x1910 <__fp_round>
    1660:	49 d1       	rcall	.+658    	; 0x18f4 <__fp_pscA>
    1662:	30 f0       	brcs	.+12     	; 0x1670 <__addsf3+0x18>
    1664:	4e d1       	rcall	.+668    	; 0x1902 <__fp_pscB>
    1666:	20 f0       	brcs	.+8      	; 0x1670 <__addsf3+0x18>
    1668:	31 f4       	brne	.+12     	; 0x1676 <__addsf3+0x1e>
    166a:	9f 3f       	cpi	r25, 0xFF	; 255
    166c:	11 f4       	brne	.+4      	; 0x1672 <__addsf3+0x1a>
    166e:	1e f4       	brtc	.+6      	; 0x1676 <__addsf3+0x1e>
    1670:	3e c1       	rjmp	.+636    	; 0x18ee <__fp_nan>
    1672:	0e f4       	brtc	.+2      	; 0x1676 <__addsf3+0x1e>
    1674:	e0 95       	com	r30
    1676:	e7 fb       	bst	r30, 7
    1678:	0b c1       	rjmp	.+534    	; 0x1890 <__fp_inf>

0000167a <__addsf3x>:
    167a:	e9 2f       	mov	r30, r25
    167c:	5a d1       	rcall	.+692    	; 0x1932 <__fp_split3>
    167e:	80 f3       	brcs	.-32     	; 0x1660 <__addsf3+0x8>
    1680:	ba 17       	cp	r27, r26
    1682:	62 07       	cpc	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	95 07       	cpc	r25, r21
    168a:	18 f0       	brcs	.+6      	; 0x1692 <__addsf3x+0x18>
    168c:	71 f4       	brne	.+28     	; 0x16aa <__addsf3x+0x30>
    168e:	9e f5       	brtc	.+102    	; 0x16f6 <__addsf3x+0x7c>
    1690:	89 c1       	rjmp	.+786    	; 0x19a4 <__fp_zero>
    1692:	0e f4       	brtc	.+2      	; 0x1696 <__addsf3x+0x1c>
    1694:	e0 95       	com	r30
    1696:	0b 2e       	mov	r0, r27
    1698:	ba 2f       	mov	r27, r26
    169a:	a0 2d       	mov	r26, r0
    169c:	0b 01       	movw	r0, r22
    169e:	b9 01       	movw	r22, r18
    16a0:	90 01       	movw	r18, r0
    16a2:	0c 01       	movw	r0, r24
    16a4:	ca 01       	movw	r24, r20
    16a6:	a0 01       	movw	r20, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	ff 27       	eor	r31, r31
    16ac:	59 1b       	sub	r21, r25
    16ae:	99 f0       	breq	.+38     	; 0x16d6 <__addsf3x+0x5c>
    16b0:	59 3f       	cpi	r21, 0xF9	; 249
    16b2:	50 f4       	brcc	.+20     	; 0x16c8 <__addsf3x+0x4e>
    16b4:	50 3e       	cpi	r21, 0xE0	; 224
    16b6:	68 f1       	brcs	.+90     	; 0x1712 <__addsf3x+0x98>
    16b8:	1a 16       	cp	r1, r26
    16ba:	f0 40       	sbci	r31, 0x00	; 0
    16bc:	a2 2f       	mov	r26, r18
    16be:	23 2f       	mov	r18, r19
    16c0:	34 2f       	mov	r19, r20
    16c2:	44 27       	eor	r20, r20
    16c4:	58 5f       	subi	r21, 0xF8	; 248
    16c6:	f3 cf       	rjmp	.-26     	; 0x16ae <__addsf3x+0x34>
    16c8:	46 95       	lsr	r20
    16ca:	37 95       	ror	r19
    16cc:	27 95       	ror	r18
    16ce:	a7 95       	ror	r26
    16d0:	f0 40       	sbci	r31, 0x00	; 0
    16d2:	53 95       	inc	r21
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <__addsf3x+0x4e>
    16d6:	7e f4       	brtc	.+30     	; 0x16f6 <__addsf3x+0x7c>
    16d8:	1f 16       	cp	r1, r31
    16da:	ba 0b       	sbc	r27, r26
    16dc:	62 0b       	sbc	r22, r18
    16de:	73 0b       	sbc	r23, r19
    16e0:	84 0b       	sbc	r24, r20
    16e2:	ba f0       	brmi	.+46     	; 0x1712 <__addsf3x+0x98>
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	a1 f0       	breq	.+40     	; 0x1710 <__addsf3x+0x96>
    16e8:	ff 0f       	add	r31, r31
    16ea:	bb 1f       	adc	r27, r27
    16ec:	66 1f       	adc	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	c2 f7       	brpl	.-16     	; 0x16e4 <__addsf3x+0x6a>
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <__addsf3x+0x98>
    16f6:	ba 0f       	add	r27, r26
    16f8:	62 1f       	adc	r22, r18
    16fa:	73 1f       	adc	r23, r19
    16fc:	84 1f       	adc	r24, r20
    16fe:	48 f4       	brcc	.+18     	; 0x1712 <__addsf3x+0x98>
    1700:	87 95       	ror	r24
    1702:	77 95       	ror	r23
    1704:	67 95       	ror	r22
    1706:	b7 95       	ror	r27
    1708:	f7 95       	ror	r31
    170a:	9e 3f       	cpi	r25, 0xFE	; 254
    170c:	08 f0       	brcs	.+2      	; 0x1710 <__addsf3x+0x96>
    170e:	b3 cf       	rjmp	.-154    	; 0x1676 <__addsf3+0x1e>
    1710:	93 95       	inc	r25
    1712:	88 0f       	add	r24, r24
    1714:	08 f0       	brcs	.+2      	; 0x1718 <__addsf3x+0x9e>
    1716:	99 27       	eor	r25, r25
    1718:	ee 0f       	add	r30, r30
    171a:	97 95       	ror	r25
    171c:	87 95       	ror	r24
    171e:	08 95       	ret

00001720 <__divsf3>:
    1720:	0c d0       	rcall	.+24     	; 0x173a <__divsf3x>
    1722:	f6 c0       	rjmp	.+492    	; 0x1910 <__fp_round>
    1724:	ee d0       	rcall	.+476    	; 0x1902 <__fp_pscB>
    1726:	40 f0       	brcs	.+16     	; 0x1738 <__divsf3+0x18>
    1728:	e5 d0       	rcall	.+458    	; 0x18f4 <__fp_pscA>
    172a:	30 f0       	brcs	.+12     	; 0x1738 <__divsf3+0x18>
    172c:	21 f4       	brne	.+8      	; 0x1736 <__divsf3+0x16>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	19 f0       	breq	.+6      	; 0x1738 <__divsf3+0x18>
    1732:	ae c0       	rjmp	.+348    	; 0x1890 <__fp_inf>
    1734:	51 11       	cpse	r21, r1
    1736:	37 c1       	rjmp	.+622    	; 0x19a6 <__fp_szero>
    1738:	da c0       	rjmp	.+436    	; 0x18ee <__fp_nan>

0000173a <__divsf3x>:
    173a:	fb d0       	rcall	.+502    	; 0x1932 <__fp_split3>
    173c:	98 f3       	brcs	.-26     	; 0x1724 <__divsf3+0x4>

0000173e <__divsf3_pse>:
    173e:	99 23       	and	r25, r25
    1740:	c9 f3       	breq	.-14     	; 0x1734 <__divsf3+0x14>
    1742:	55 23       	and	r21, r21
    1744:	b1 f3       	breq	.-20     	; 0x1732 <__divsf3+0x12>
    1746:	95 1b       	sub	r25, r21
    1748:	55 0b       	sbc	r21, r21
    174a:	bb 27       	eor	r27, r27
    174c:	aa 27       	eor	r26, r26
    174e:	62 17       	cp	r22, r18
    1750:	73 07       	cpc	r23, r19
    1752:	84 07       	cpc	r24, r20
    1754:	38 f0       	brcs	.+14     	; 0x1764 <__divsf3_pse+0x26>
    1756:	9f 5f       	subi	r25, 0xFF	; 255
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	44 1f       	adc	r20, r20
    1760:	aa 1f       	adc	r26, r26
    1762:	a9 f3       	breq	.-22     	; 0x174e <__divsf3_pse+0x10>
    1764:	33 d0       	rcall	.+102    	; 0x17cc <__divsf3_pse+0x8e>
    1766:	0e 2e       	mov	r0, r30
    1768:	3a f0       	brmi	.+14     	; 0x1778 <__divsf3_pse+0x3a>
    176a:	e0 e8       	ldi	r30, 0x80	; 128
    176c:	30 d0       	rcall	.+96     	; 0x17ce <__divsf3_pse+0x90>
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	e6 95       	lsr	r30
    1774:	00 1c       	adc	r0, r0
    1776:	ca f7       	brpl	.-14     	; 0x176a <__divsf3_pse+0x2c>
    1778:	29 d0       	rcall	.+82     	; 0x17cc <__divsf3_pse+0x8e>
    177a:	fe 2f       	mov	r31, r30
    177c:	27 d0       	rcall	.+78     	; 0x17cc <__divsf3_pse+0x8e>
    177e:	66 0f       	add	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	bb 1f       	adc	r27, r27
    1786:	26 17       	cp	r18, r22
    1788:	37 07       	cpc	r19, r23
    178a:	48 07       	cpc	r20, r24
    178c:	ab 07       	cpc	r26, r27
    178e:	b0 e8       	ldi	r27, 0x80	; 128
    1790:	09 f0       	breq	.+2      	; 0x1794 <__divsf3_pse+0x56>
    1792:	bb 0b       	sbc	r27, r27
    1794:	80 2d       	mov	r24, r0
    1796:	bf 01       	movw	r22, r30
    1798:	ff 27       	eor	r31, r31
    179a:	93 58       	subi	r25, 0x83	; 131
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	2a f0       	brmi	.+10     	; 0x17aa <__divsf3_pse+0x6c>
    17a0:	9e 3f       	cpi	r25, 0xFE	; 254
    17a2:	51 05       	cpc	r21, r1
    17a4:	68 f0       	brcs	.+26     	; 0x17c0 <__divsf3_pse+0x82>
    17a6:	74 c0       	rjmp	.+232    	; 0x1890 <__fp_inf>
    17a8:	fe c0       	rjmp	.+508    	; 0x19a6 <__fp_szero>
    17aa:	5f 3f       	cpi	r21, 0xFF	; 255
    17ac:	ec f3       	brlt	.-6      	; 0x17a8 <__divsf3_pse+0x6a>
    17ae:	98 3e       	cpi	r25, 0xE8	; 232
    17b0:	dc f3       	brlt	.-10     	; 0x17a8 <__divsf3_pse+0x6a>
    17b2:	86 95       	lsr	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b7 95       	ror	r27
    17ba:	f7 95       	ror	r31
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__divsf3_pse+0x74>
    17c0:	88 0f       	add	r24, r24
    17c2:	91 1d       	adc	r25, r1
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret
    17cc:	e1 e0       	ldi	r30, 0x01	; 1
    17ce:	66 0f       	add	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 1f       	adc	r24, r24
    17d4:	bb 1f       	adc	r27, r27
    17d6:	62 17       	cp	r22, r18
    17d8:	73 07       	cpc	r23, r19
    17da:	84 07       	cpc	r24, r20
    17dc:	ba 07       	cpc	r27, r26
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__divsf3_pse+0xaa>
    17e0:	62 1b       	sub	r22, r18
    17e2:	73 0b       	sbc	r23, r19
    17e4:	84 0b       	sbc	r24, r20
    17e6:	ba 0b       	sbc	r27, r26
    17e8:	ee 1f       	adc	r30, r30
    17ea:	88 f7       	brcc	.-30     	; 0x17ce <__divsf3_pse+0x90>
    17ec:	e0 95       	com	r30
    17ee:	08 95       	ret

000017f0 <__floatunsisf>:
    17f0:	e8 94       	clt
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <__floatsisf+0x12>

000017f4 <__floatsisf>:
    17f4:	97 fb       	bst	r25, 7
    17f6:	3e f4       	brtc	.+14     	; 0x1806 <__floatsisf+0x12>
    17f8:	90 95       	com	r25
    17fa:	80 95       	com	r24
    17fc:	70 95       	com	r23
    17fe:	61 95       	neg	r22
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	99 23       	and	r25, r25
    1808:	a9 f0       	breq	.+42     	; 0x1834 <__floatsisf+0x40>
    180a:	f9 2f       	mov	r31, r25
    180c:	96 e9       	ldi	r25, 0x96	; 150
    180e:	bb 27       	eor	r27, r27
    1810:	93 95       	inc	r25
    1812:	f6 95       	lsr	r31
    1814:	87 95       	ror	r24
    1816:	77 95       	ror	r23
    1818:	67 95       	ror	r22
    181a:	b7 95       	ror	r27
    181c:	f1 11       	cpse	r31, r1
    181e:	f8 cf       	rjmp	.-16     	; 0x1810 <__floatsisf+0x1c>
    1820:	fa f4       	brpl	.+62     	; 0x1860 <__floatsisf+0x6c>
    1822:	bb 0f       	add	r27, r27
    1824:	11 f4       	brne	.+4      	; 0x182a <__floatsisf+0x36>
    1826:	60 ff       	sbrs	r22, 0
    1828:	1b c0       	rjmp	.+54     	; 0x1860 <__floatsisf+0x6c>
    182a:	6f 5f       	subi	r22, 0xFF	; 255
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	8f 4f       	sbci	r24, 0xFF	; 255
    1830:	9f 4f       	sbci	r25, 0xFF	; 255
    1832:	16 c0       	rjmp	.+44     	; 0x1860 <__floatsisf+0x6c>
    1834:	88 23       	and	r24, r24
    1836:	11 f0       	breq	.+4      	; 0x183c <__floatsisf+0x48>
    1838:	96 e9       	ldi	r25, 0x96	; 150
    183a:	11 c0       	rjmp	.+34     	; 0x185e <__floatsisf+0x6a>
    183c:	77 23       	and	r23, r23
    183e:	21 f0       	breq	.+8      	; 0x1848 <__floatsisf+0x54>
    1840:	9e e8       	ldi	r25, 0x8E	; 142
    1842:	87 2f       	mov	r24, r23
    1844:	76 2f       	mov	r23, r22
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <__floatsisf+0x5e>
    1848:	66 23       	and	r22, r22
    184a:	71 f0       	breq	.+28     	; 0x1868 <__floatsisf+0x74>
    184c:	96 e8       	ldi	r25, 0x86	; 134
    184e:	86 2f       	mov	r24, r22
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	2a f0       	brmi	.+10     	; 0x1860 <__floatsisf+0x6c>
    1856:	9a 95       	dec	r25
    1858:	66 0f       	add	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	da f7       	brpl	.-10     	; 0x1856 <__floatsisf+0x62>
    1860:	88 0f       	add	r24, r24
    1862:	96 95       	lsr	r25
    1864:	87 95       	ror	r24
    1866:	97 f9       	bld	r25, 7
    1868:	08 95       	ret

0000186a <floor>:
    186a:	85 d0       	rcall	.+266    	; 0x1976 <__fp_trunc>
    186c:	80 f0       	brcs	.+32     	; 0x188e <floor+0x24>
    186e:	9f 37       	cpi	r25, 0x7F	; 127
    1870:	40 f4       	brcc	.+16     	; 0x1882 <floor+0x18>
    1872:	91 11       	cpse	r25, r1
    1874:	0e f0       	brts	.+2      	; 0x1878 <floor+0xe>
    1876:	97 c0       	rjmp	.+302    	; 0x19a6 <__fp_szero>
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	80 e8       	ldi	r24, 0x80	; 128
    187e:	9f eb       	ldi	r25, 0xBF	; 191
    1880:	08 95       	ret
    1882:	26 f4       	brtc	.+8      	; 0x188c <floor+0x22>
    1884:	1b 16       	cp	r1, r27
    1886:	61 1d       	adc	r22, r1
    1888:	71 1d       	adc	r23, r1
    188a:	81 1d       	adc	r24, r1
    188c:	07 c0       	rjmp	.+14     	; 0x189c <__fp_mintl>
    188e:	21 c0       	rjmp	.+66     	; 0x18d2 <__fp_mpack>

00001890 <__fp_inf>:
    1890:	97 f9       	bld	r25, 7
    1892:	9f 67       	ori	r25, 0x7F	; 127
    1894:	80 e8       	ldi	r24, 0x80	; 128
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	08 95       	ret

0000189c <__fp_mintl>:
    189c:	88 23       	and	r24, r24
    189e:	71 f4       	brne	.+28     	; 0x18bc <__fp_mintl+0x20>
    18a0:	77 23       	and	r23, r23
    18a2:	21 f0       	breq	.+8      	; 0x18ac <__fp_mintl+0x10>
    18a4:	98 50       	subi	r25, 0x08	; 8
    18a6:	87 2b       	or	r24, r23
    18a8:	76 2f       	mov	r23, r22
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <__fp_mintl+0x1e>
    18ac:	66 23       	and	r22, r22
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <__fp_mintl+0x18>
    18b0:	99 27       	eor	r25, r25
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <__fp_mintl+0x32>
    18b4:	90 51       	subi	r25, 0x10	; 16
    18b6:	86 2b       	or	r24, r22
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	2a f0       	brmi	.+10     	; 0x18c8 <__fp_mintl+0x2c>
    18be:	9a 95       	dec	r25
    18c0:	66 0f       	add	r22, r22
    18c2:	77 1f       	adc	r23, r23
    18c4:	88 1f       	adc	r24, r24
    18c6:	da f7       	brpl	.-10     	; 0x18be <__fp_mintl+0x22>
    18c8:	88 0f       	add	r24, r24
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret

000018d2 <__fp_mpack>:
    18d2:	9f 3f       	cpi	r25, 0xFF	; 255
    18d4:	31 f0       	breq	.+12     	; 0x18e2 <__fp_mpack_finite+0xc>

000018d6 <__fp_mpack_finite>:
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	20 f4       	brcc	.+8      	; 0x18e2 <__fp_mpack_finite+0xc>
    18da:	87 95       	ror	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	b7 95       	ror	r27
    18e2:	88 0f       	add	r24, r24
    18e4:	91 1d       	adc	r25, r1
    18e6:	96 95       	lsr	r25
    18e8:	87 95       	ror	r24
    18ea:	97 f9       	bld	r25, 7
    18ec:	08 95       	ret

000018ee <__fp_nan>:
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	80 ec       	ldi	r24, 0xC0	; 192
    18f2:	08 95       	ret

000018f4 <__fp_pscA>:
    18f4:	00 24       	eor	r0, r0
    18f6:	0a 94       	dec	r0
    18f8:	16 16       	cp	r1, r22
    18fa:	17 06       	cpc	r1, r23
    18fc:	18 06       	cpc	r1, r24
    18fe:	09 06       	cpc	r0, r25
    1900:	08 95       	ret

00001902 <__fp_pscB>:
    1902:	00 24       	eor	r0, r0
    1904:	0a 94       	dec	r0
    1906:	12 16       	cp	r1, r18
    1908:	13 06       	cpc	r1, r19
    190a:	14 06       	cpc	r1, r20
    190c:	05 06       	cpc	r0, r21
    190e:	08 95       	ret

00001910 <__fp_round>:
    1910:	09 2e       	mov	r0, r25
    1912:	03 94       	inc	r0
    1914:	00 0c       	add	r0, r0
    1916:	11 f4       	brne	.+4      	; 0x191c <__fp_round+0xc>
    1918:	88 23       	and	r24, r24
    191a:	52 f0       	brmi	.+20     	; 0x1930 <__fp_round+0x20>
    191c:	bb 0f       	add	r27, r27
    191e:	40 f4       	brcc	.+16     	; 0x1930 <__fp_round+0x20>
    1920:	bf 2b       	or	r27, r31
    1922:	11 f4       	brne	.+4      	; 0x1928 <__fp_round+0x18>
    1924:	60 ff       	sbrs	r22, 0
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <__fp_round+0x20>
    1928:	6f 5f       	subi	r22, 0xFF	; 255
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	8f 4f       	sbci	r24, 0xFF	; 255
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	08 95       	ret

00001932 <__fp_split3>:
    1932:	57 fd       	sbrc	r21, 7
    1934:	90 58       	subi	r25, 0x80	; 128
    1936:	44 0f       	add	r20, r20
    1938:	55 1f       	adc	r21, r21
    193a:	59 f0       	breq	.+22     	; 0x1952 <__fp_splitA+0x10>
    193c:	5f 3f       	cpi	r21, 0xFF	; 255
    193e:	71 f0       	breq	.+28     	; 0x195c <__fp_splitA+0x1a>
    1940:	47 95       	ror	r20

00001942 <__fp_splitA>:
    1942:	88 0f       	add	r24, r24
    1944:	97 fb       	bst	r25, 7
    1946:	99 1f       	adc	r25, r25
    1948:	61 f0       	breq	.+24     	; 0x1962 <__fp_splitA+0x20>
    194a:	9f 3f       	cpi	r25, 0xFF	; 255
    194c:	79 f0       	breq	.+30     	; 0x196c <__fp_splitA+0x2a>
    194e:	87 95       	ror	r24
    1950:	08 95       	ret
    1952:	12 16       	cp	r1, r18
    1954:	13 06       	cpc	r1, r19
    1956:	14 06       	cpc	r1, r20
    1958:	55 1f       	adc	r21, r21
    195a:	f2 cf       	rjmp	.-28     	; 0x1940 <__fp_split3+0xe>
    195c:	46 95       	lsr	r20
    195e:	f1 df       	rcall	.-30     	; 0x1942 <__fp_splitA>
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <__fp_splitA+0x30>
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	18 06       	cpc	r1, r24
    1968:	99 1f       	adc	r25, r25
    196a:	f1 cf       	rjmp	.-30     	; 0x194e <__fp_splitA+0xc>
    196c:	86 95       	lsr	r24
    196e:	71 05       	cpc	r23, r1
    1970:	61 05       	cpc	r22, r1
    1972:	08 94       	sec
    1974:	08 95       	ret

00001976 <__fp_trunc>:
    1976:	e5 df       	rcall	.-54     	; 0x1942 <__fp_splitA>
    1978:	a0 f0       	brcs	.+40     	; 0x19a2 <__fp_trunc+0x2c>
    197a:	be e7       	ldi	r27, 0x7E	; 126
    197c:	b9 17       	cp	r27, r25
    197e:	88 f4       	brcc	.+34     	; 0x19a2 <__fp_trunc+0x2c>
    1980:	bb 27       	eor	r27, r27
    1982:	9f 38       	cpi	r25, 0x8F	; 143
    1984:	60 f4       	brcc	.+24     	; 0x199e <__fp_trunc+0x28>
    1986:	16 16       	cp	r1, r22
    1988:	b1 1d       	adc	r27, r1
    198a:	67 2f       	mov	r22, r23
    198c:	78 2f       	mov	r23, r24
    198e:	88 27       	eor	r24, r24
    1990:	98 5f       	subi	r25, 0xF8	; 248
    1992:	f7 cf       	rjmp	.-18     	; 0x1982 <__fp_trunc+0xc>
    1994:	86 95       	lsr	r24
    1996:	77 95       	ror	r23
    1998:	67 95       	ror	r22
    199a:	b1 1d       	adc	r27, r1
    199c:	93 95       	inc	r25
    199e:	96 39       	cpi	r25, 0x96	; 150
    19a0:	c8 f3       	brcs	.-14     	; 0x1994 <__fp_trunc+0x1e>
    19a2:	08 95       	ret

000019a4 <__fp_zero>:
    19a4:	e8 94       	clt

000019a6 <__fp_szero>:
    19a6:	bb 27       	eor	r27, r27
    19a8:	66 27       	eor	r22, r22
    19aa:	77 27       	eor	r23, r23
    19ac:	cb 01       	movw	r24, r22
    19ae:	97 f9       	bld	r25, 7
    19b0:	08 95       	ret

000019b2 <__mulsf3>:
    19b2:	0b d0       	rcall	.+22     	; 0x19ca <__mulsf3x>
    19b4:	ad cf       	rjmp	.-166    	; 0x1910 <__fp_round>
    19b6:	9e df       	rcall	.-196    	; 0x18f4 <__fp_pscA>
    19b8:	28 f0       	brcs	.+10     	; 0x19c4 <__mulsf3+0x12>
    19ba:	a3 df       	rcall	.-186    	; 0x1902 <__fp_pscB>
    19bc:	18 f0       	brcs	.+6      	; 0x19c4 <__mulsf3+0x12>
    19be:	95 23       	and	r25, r21
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <__mulsf3+0x12>
    19c2:	66 cf       	rjmp	.-308    	; 0x1890 <__fp_inf>
    19c4:	94 cf       	rjmp	.-216    	; 0x18ee <__fp_nan>
    19c6:	11 24       	eor	r1, r1
    19c8:	ee cf       	rjmp	.-36     	; 0x19a6 <__fp_szero>

000019ca <__mulsf3x>:
    19ca:	b3 df       	rcall	.-154    	; 0x1932 <__fp_split3>
    19cc:	a0 f3       	brcs	.-24     	; 0x19b6 <__mulsf3+0x4>

000019ce <__mulsf3_pse>:
    19ce:	95 9f       	mul	r25, r21
    19d0:	d1 f3       	breq	.-12     	; 0x19c6 <__mulsf3+0x14>
    19d2:	95 0f       	add	r25, r21
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	55 1f       	adc	r21, r21
    19d8:	62 9f       	mul	r22, r18
    19da:	f0 01       	movw	r30, r0
    19dc:	72 9f       	mul	r23, r18
    19de:	bb 27       	eor	r27, r27
    19e0:	f0 0d       	add	r31, r0
    19e2:	b1 1d       	adc	r27, r1
    19e4:	63 9f       	mul	r22, r19
    19e6:	aa 27       	eor	r26, r26
    19e8:	f0 0d       	add	r31, r0
    19ea:	b1 1d       	adc	r27, r1
    19ec:	aa 1f       	adc	r26, r26
    19ee:	64 9f       	mul	r22, r20
    19f0:	66 27       	eor	r22, r22
    19f2:	b0 0d       	add	r27, r0
    19f4:	a1 1d       	adc	r26, r1
    19f6:	66 1f       	adc	r22, r22
    19f8:	82 9f       	mul	r24, r18
    19fa:	22 27       	eor	r18, r18
    19fc:	b0 0d       	add	r27, r0
    19fe:	a1 1d       	adc	r26, r1
    1a00:	62 1f       	adc	r22, r18
    1a02:	73 9f       	mul	r23, r19
    1a04:	b0 0d       	add	r27, r0
    1a06:	a1 1d       	adc	r26, r1
    1a08:	62 1f       	adc	r22, r18
    1a0a:	83 9f       	mul	r24, r19
    1a0c:	a0 0d       	add	r26, r0
    1a0e:	61 1d       	adc	r22, r1
    1a10:	22 1f       	adc	r18, r18
    1a12:	74 9f       	mul	r23, r20
    1a14:	33 27       	eor	r19, r19
    1a16:	a0 0d       	add	r26, r0
    1a18:	61 1d       	adc	r22, r1
    1a1a:	23 1f       	adc	r18, r19
    1a1c:	84 9f       	mul	r24, r20
    1a1e:	60 0d       	add	r22, r0
    1a20:	21 1d       	adc	r18, r1
    1a22:	82 2f       	mov	r24, r18
    1a24:	76 2f       	mov	r23, r22
    1a26:	6a 2f       	mov	r22, r26
    1a28:	11 24       	eor	r1, r1
    1a2a:	9f 57       	subi	r25, 0x7F	; 127
    1a2c:	50 40       	sbci	r21, 0x00	; 0
    1a2e:	8a f0       	brmi	.+34     	; 0x1a52 <__mulsf3_pse+0x84>
    1a30:	e1 f0       	breq	.+56     	; 0x1a6a <__mulsf3_pse+0x9c>
    1a32:	88 23       	and	r24, r24
    1a34:	4a f0       	brmi	.+18     	; 0x1a48 <__mulsf3_pse+0x7a>
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	91 50       	subi	r25, 0x01	; 1
    1a44:	50 40       	sbci	r21, 0x00	; 0
    1a46:	a9 f7       	brne	.-22     	; 0x1a32 <__mulsf3_pse+0x64>
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	70 f0       	brcs	.+28     	; 0x1a6a <__mulsf3_pse+0x9c>
    1a4e:	20 cf       	rjmp	.-448    	; 0x1890 <__fp_inf>
    1a50:	aa cf       	rjmp	.-172    	; 0x19a6 <__fp_szero>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	ec f3       	brlt	.-6      	; 0x1a50 <__mulsf3_pse+0x82>
    1a56:	98 3e       	cpi	r25, 0xE8	; 232
    1a58:	dc f3       	brlt	.-10     	; 0x1a50 <__mulsf3_pse+0x82>
    1a5a:	86 95       	lsr	r24
    1a5c:	77 95       	ror	r23
    1a5e:	67 95       	ror	r22
    1a60:	b7 95       	ror	r27
    1a62:	f7 95       	ror	r31
    1a64:	e7 95       	ror	r30
    1a66:	9f 5f       	subi	r25, 0xFF	; 255
    1a68:	c1 f7       	brne	.-16     	; 0x1a5a <__mulsf3_pse+0x8c>
    1a6a:	fe 2b       	or	r31, r30
    1a6c:	88 0f       	add	r24, r24
    1a6e:	91 1d       	adc	r25, r1
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <printf>:
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e2 e4       	ldi	r30, 0x42	; 66
    1a7e:	fd e0       	ldi	r31, 0x0D	; 13
    1a80:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__prologue_saves__+0x20>
    1a84:	fe 01       	movw	r30, r28
    1a86:	35 96       	adiw	r30, 0x05	; 5
    1a88:	61 91       	ld	r22, Z+
    1a8a:	71 91       	ld	r23, Z+
    1a8c:	80 91 a1 01 	lds	r24, 0x01A1
    1a90:	90 91 a2 01 	lds	r25, 0x01A2
    1a94:	af 01       	movw	r20, r30
    1a96:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vfprintf>
    1a9a:	20 96       	adiw	r28, 0x00	; 0
    1a9c:	e2 e0       	ldi	r30, 0x02	; 2
    1a9e:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__epilogue_restores__+0x20>

00001aa2 <vfprintf>:
    1aa2:	ad e0       	ldi	r26, 0x0D	; 13
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e7 e5       	ldi	r30, 0x57	; 87
    1aa8:	fd e0       	ldi	r31, 0x0D	; 13
    1aaa:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__prologue_saves__>
    1aae:	3c 01       	movw	r6, r24
    1ab0:	7d 87       	std	Y+13, r23	; 0x0d
    1ab2:	6c 87       	std	Y+12, r22	; 0x0c
    1ab4:	5a 01       	movw	r10, r20
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	17 82       	std	Z+7, r1	; 0x07
    1aba:	16 82       	std	Z+6, r1	; 0x06
    1abc:	83 81       	ldd	r24, Z+3	; 0x03
    1abe:	81 ff       	sbrs	r24, 1
    1ac0:	c8 c1       	rjmp	.+912    	; 0x1e52 <vfprintf+0x3b0>
    1ac2:	2e 01       	movw	r4, r28
    1ac4:	08 94       	sec
    1ac6:	41 1c       	adc	r4, r1
    1ac8:	51 1c       	adc	r5, r1
    1aca:	f3 01       	movw	r30, r6
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ad0:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ad2:	93 fd       	sbrc	r25, 3
    1ad4:	85 91       	lpm	r24, Z+
    1ad6:	93 ff       	sbrs	r25, 3
    1ad8:	81 91       	ld	r24, Z+
    1ada:	fd 87       	std	Y+13, r31	; 0x0d
    1adc:	ec 87       	std	Y+12, r30	; 0x0c
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <vfprintf+0x42>
    1ae2:	b3 c1       	rjmp	.+870    	; 0x1e4a <vfprintf+0x3a8>
    1ae4:	85 32       	cpi	r24, 0x25	; 37
    1ae6:	41 f4       	brne	.+16     	; 0x1af8 <vfprintf+0x56>
    1ae8:	93 fd       	sbrc	r25, 3
    1aea:	85 91       	lpm	r24, Z+
    1aec:	93 ff       	sbrs	r25, 3
    1aee:	81 91       	ld	r24, Z+
    1af0:	fd 87       	std	Y+13, r31	; 0x0d
    1af2:	ec 87       	std	Y+12, r30	; 0x0c
    1af4:	85 32       	cpi	r24, 0x25	; 37
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <vfprintf+0x60>
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	b3 01       	movw	r22, r6
    1afc:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1b00:	e4 cf       	rjmp	.-56     	; 0x1aca <vfprintf+0x28>
    1b02:	ff 24       	eor	r15, r15
    1b04:	ee 24       	eor	r14, r14
    1b06:	10 e0       	ldi	r17, 0x00	; 0
    1b08:	10 32       	cpi	r17, 0x20	; 32
    1b0a:	b0 f4       	brcc	.+44     	; 0x1b38 <vfprintf+0x96>
    1b0c:	8b 32       	cpi	r24, 0x2B	; 43
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <vfprintf+0x88>
    1b10:	8c 32       	cpi	r24, 0x2C	; 44
    1b12:	28 f4       	brcc	.+10     	; 0x1b1e <vfprintf+0x7c>
    1b14:	80 32       	cpi	r24, 0x20	; 32
    1b16:	51 f0       	breq	.+20     	; 0x1b2c <vfprintf+0x8a>
    1b18:	83 32       	cpi	r24, 0x23	; 35
    1b1a:	71 f4       	brne	.+28     	; 0x1b38 <vfprintf+0x96>
    1b1c:	0b c0       	rjmp	.+22     	; 0x1b34 <vfprintf+0x92>
    1b1e:	8d 32       	cpi	r24, 0x2D	; 45
    1b20:	39 f0       	breq	.+14     	; 0x1b30 <vfprintf+0x8e>
    1b22:	80 33       	cpi	r24, 0x30	; 48
    1b24:	49 f4       	brne	.+18     	; 0x1b38 <vfprintf+0x96>
    1b26:	11 60       	ori	r17, 0x01	; 1
    1b28:	2c c0       	rjmp	.+88     	; 0x1b82 <vfprintf+0xe0>
    1b2a:	12 60       	ori	r17, 0x02	; 2
    1b2c:	14 60       	ori	r17, 0x04	; 4
    1b2e:	29 c0       	rjmp	.+82     	; 0x1b82 <vfprintf+0xe0>
    1b30:	18 60       	ori	r17, 0x08	; 8
    1b32:	27 c0       	rjmp	.+78     	; 0x1b82 <vfprintf+0xe0>
    1b34:	10 61       	ori	r17, 0x10	; 16
    1b36:	25 c0       	rjmp	.+74     	; 0x1b82 <vfprintf+0xe0>
    1b38:	17 fd       	sbrc	r17, 7
    1b3a:	2e c0       	rjmp	.+92     	; 0x1b98 <vfprintf+0xf6>
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	20 53       	subi	r18, 0x30	; 48
    1b40:	2a 30       	cpi	r18, 0x0A	; 10
    1b42:	98 f4       	brcc	.+38     	; 0x1b6a <vfprintf+0xc8>
    1b44:	16 ff       	sbrs	r17, 6
    1b46:	08 c0       	rjmp	.+16     	; 0x1b58 <vfprintf+0xb6>
    1b48:	8f 2d       	mov	r24, r15
    1b4a:	88 0f       	add	r24, r24
    1b4c:	f8 2e       	mov	r15, r24
    1b4e:	ff 0c       	add	r15, r15
    1b50:	ff 0c       	add	r15, r15
    1b52:	f8 0e       	add	r15, r24
    1b54:	f2 0e       	add	r15, r18
    1b56:	15 c0       	rjmp	.+42     	; 0x1b82 <vfprintf+0xe0>
    1b58:	8e 2d       	mov	r24, r14
    1b5a:	88 0f       	add	r24, r24
    1b5c:	e8 2e       	mov	r14, r24
    1b5e:	ee 0c       	add	r14, r14
    1b60:	ee 0c       	add	r14, r14
    1b62:	e8 0e       	add	r14, r24
    1b64:	e2 0e       	add	r14, r18
    1b66:	10 62       	ori	r17, 0x20	; 32
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <vfprintf+0xe0>
    1b6a:	8e 32       	cpi	r24, 0x2E	; 46
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <vfprintf+0xd4>
    1b6e:	16 fd       	sbrc	r17, 6
    1b70:	6c c1       	rjmp	.+728    	; 0x1e4a <vfprintf+0x3a8>
    1b72:	10 64       	ori	r17, 0x40	; 64
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <vfprintf+0xe0>
    1b76:	8c 36       	cpi	r24, 0x6C	; 108
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <vfprintf+0xdc>
    1b7a:	10 68       	ori	r17, 0x80	; 128
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0xe0>
    1b7e:	88 36       	cpi	r24, 0x68	; 104
    1b80:	59 f4       	brne	.+22     	; 0x1b98 <vfprintf+0xf6>
    1b82:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b84:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b86:	93 fd       	sbrc	r25, 3
    1b88:	85 91       	lpm	r24, Z+
    1b8a:	93 ff       	sbrs	r25, 3
    1b8c:	81 91       	ld	r24, Z+
    1b8e:	fd 87       	std	Y+13, r31	; 0x0d
    1b90:	ec 87       	std	Y+12, r30	; 0x0c
    1b92:	88 23       	and	r24, r24
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <vfprintf+0xf6>
    1b96:	b8 cf       	rjmp	.-144    	; 0x1b08 <vfprintf+0x66>
    1b98:	98 2f       	mov	r25, r24
    1b9a:	95 54       	subi	r25, 0x45	; 69
    1b9c:	93 30       	cpi	r25, 0x03	; 3
    1b9e:	18 f0       	brcs	.+6      	; 0x1ba6 <vfprintf+0x104>
    1ba0:	90 52       	subi	r25, 0x20	; 32
    1ba2:	93 30       	cpi	r25, 0x03	; 3
    1ba4:	38 f4       	brcc	.+14     	; 0x1bb4 <vfprintf+0x112>
    1ba6:	24 e0       	ldi	r18, 0x04	; 4
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	a2 0e       	add	r10, r18
    1bac:	b3 1e       	adc	r11, r19
    1bae:	3f e3       	ldi	r19, 0x3F	; 63
    1bb0:	39 83       	std	Y+1, r19	; 0x01
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <vfprintf+0x130>
    1bb4:	83 36       	cpi	r24, 0x63	; 99
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <vfprintf+0x122>
    1bb8:	83 37       	cpi	r24, 0x73	; 115
    1bba:	81 f0       	breq	.+32     	; 0x1bdc <vfprintf+0x13a>
    1bbc:	83 35       	cpi	r24, 0x53	; 83
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <vfprintf+0x120>
    1bc0:	5a c0       	rjmp	.+180    	; 0x1c76 <vfprintf+0x1d4>
    1bc2:	22 c0       	rjmp	.+68     	; 0x1c08 <vfprintf+0x166>
    1bc4:	f5 01       	movw	r30, r10
    1bc6:	80 81       	ld	r24, Z
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	22 e0       	ldi	r18, 0x02	; 2
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	a2 0e       	add	r10, r18
    1bd0:	b3 1e       	adc	r11, r19
    1bd2:	21 e0       	ldi	r18, 0x01	; 1
    1bd4:	c2 2e       	mov	r12, r18
    1bd6:	d1 2c       	mov	r13, r1
    1bd8:	42 01       	movw	r8, r4
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <vfprintf+0x162>
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	29 2e       	mov	r2, r25
    1be0:	31 2c       	mov	r3, r1
    1be2:	2a 0c       	add	r2, r10
    1be4:	3b 1c       	adc	r3, r11
    1be6:	f5 01       	movw	r30, r10
    1be8:	80 80       	ld	r8, Z
    1bea:	91 80       	ldd	r9, Z+1	; 0x01
    1bec:	16 ff       	sbrs	r17, 6
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <vfprintf+0x154>
    1bf0:	6f 2d       	mov	r22, r15
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <vfprintf+0x158>
    1bf6:	6f ef       	ldi	r22, 0xFF	; 255
    1bf8:	7f ef       	ldi	r23, 0xFF	; 255
    1bfa:	c4 01       	movw	r24, r8
    1bfc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <strnlen>
    1c00:	6c 01       	movw	r12, r24
    1c02:	51 01       	movw	r10, r2
    1c04:	1f 77       	andi	r17, 0x7F	; 127
    1c06:	15 c0       	rjmp	.+42     	; 0x1c32 <vfprintf+0x190>
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	28 2e       	mov	r2, r24
    1c0c:	31 2c       	mov	r3, r1
    1c0e:	2a 0c       	add	r2, r10
    1c10:	3b 1c       	adc	r3, r11
    1c12:	f5 01       	movw	r30, r10
    1c14:	80 80       	ld	r8, Z
    1c16:	91 80       	ldd	r9, Z+1	; 0x01
    1c18:	16 ff       	sbrs	r17, 6
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfprintf+0x180>
    1c1c:	6f 2d       	mov	r22, r15
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <vfprintf+0x184>
    1c22:	6f ef       	ldi	r22, 0xFF	; 255
    1c24:	7f ef       	ldi	r23, 0xFF	; 255
    1c26:	c4 01       	movw	r24, r8
    1c28:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <strnlen_P>
    1c2c:	6c 01       	movw	r12, r24
    1c2e:	10 68       	ori	r17, 0x80	; 128
    1c30:	51 01       	movw	r10, r2
    1c32:	13 fd       	sbrc	r17, 3
    1c34:	1c c0       	rjmp	.+56     	; 0x1c6e <vfprintf+0x1cc>
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <vfprintf+0x1a2>
    1c38:	80 e2       	ldi	r24, 0x20	; 32
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	b3 01       	movw	r22, r6
    1c3e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1c42:	ea 94       	dec	r14
    1c44:	8e 2d       	mov	r24, r14
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	c8 16       	cp	r12, r24
    1c4a:	d9 06       	cpc	r13, r25
    1c4c:	a8 f3       	brcs	.-22     	; 0x1c38 <vfprintf+0x196>
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <vfprintf+0x1cc>
    1c50:	f4 01       	movw	r30, r8
    1c52:	17 fd       	sbrc	r17, 7
    1c54:	85 91       	lpm	r24, Z+
    1c56:	17 ff       	sbrs	r17, 7
    1c58:	81 91       	ld	r24, Z+
    1c5a:	4f 01       	movw	r8, r30
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b3 01       	movw	r22, r6
    1c60:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1c64:	e1 10       	cpse	r14, r1
    1c66:	ea 94       	dec	r14
    1c68:	08 94       	sec
    1c6a:	c1 08       	sbc	r12, r1
    1c6c:	d1 08       	sbc	r13, r1
    1c6e:	c1 14       	cp	r12, r1
    1c70:	d1 04       	cpc	r13, r1
    1c72:	71 f7       	brne	.-36     	; 0x1c50 <vfprintf+0x1ae>
    1c74:	e7 c0       	rjmp	.+462    	; 0x1e44 <vfprintf+0x3a2>
    1c76:	84 36       	cpi	r24, 0x64	; 100
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <vfprintf+0x1dc>
    1c7a:	89 36       	cpi	r24, 0x69	; 105
    1c7c:	51 f5       	brne	.+84     	; 0x1cd2 <vfprintf+0x230>
    1c7e:	f5 01       	movw	r30, r10
    1c80:	17 ff       	sbrs	r17, 7
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <vfprintf+0x1f0>
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	a2 81       	ldd	r26, Z+2	; 0x02
    1c8a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c8c:	24 e0       	ldi	r18, 0x04	; 4
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	08 c0       	rjmp	.+16     	; 0x1ca2 <vfprintf+0x200>
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	aa 27       	eor	r26, r26
    1c98:	97 fd       	sbrc	r25, 7
    1c9a:	a0 95       	com	r26
    1c9c:	ba 2f       	mov	r27, r26
    1c9e:	22 e0       	ldi	r18, 0x02	; 2
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	a2 0e       	add	r10, r18
    1ca4:	b3 1e       	adc	r11, r19
    1ca6:	01 2f       	mov	r16, r17
    1ca8:	0f 76       	andi	r16, 0x6F	; 111
    1caa:	b7 ff       	sbrs	r27, 7
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <vfprintf+0x21c>
    1cae:	b0 95       	com	r27
    1cb0:	a0 95       	com	r26
    1cb2:	90 95       	com	r25
    1cb4:	81 95       	neg	r24
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	af 4f       	sbci	r26, 0xFF	; 255
    1cba:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbc:	00 68       	ori	r16, 0x80	; 128
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	a2 01       	movw	r20, r4
    1cc4:	2a e0       	ldi	r18, 0x0A	; 10
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__ultoa_invert>
    1ccc:	d8 2e       	mov	r13, r24
    1cce:	d4 18       	sub	r13, r4
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <vfprintf+0x2ae>
    1cd2:	85 37       	cpi	r24, 0x75	; 117
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <vfprintf+0x23c>
    1cd6:	1f 7e       	andi	r17, 0xEF	; 239
    1cd8:	2a e0       	ldi	r18, 0x0A	; 10
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	20 c0       	rjmp	.+64     	; 0x1d1e <vfprintf+0x27c>
    1cde:	19 7f       	andi	r17, 0xF9	; 249
    1ce0:	8f 36       	cpi	r24, 0x6F	; 111
    1ce2:	a9 f0       	breq	.+42     	; 0x1d0e <vfprintf+0x26c>
    1ce4:	80 37       	cpi	r24, 0x70	; 112
    1ce6:	20 f4       	brcc	.+8      	; 0x1cf0 <vfprintf+0x24e>
    1ce8:	88 35       	cpi	r24, 0x58	; 88
    1cea:	09 f0       	breq	.+2      	; 0x1cee <vfprintf+0x24c>
    1cec:	ae c0       	rjmp	.+348    	; 0x1e4a <vfprintf+0x3a8>
    1cee:	0b c0       	rjmp	.+22     	; 0x1d06 <vfprintf+0x264>
    1cf0:	80 37       	cpi	r24, 0x70	; 112
    1cf2:	21 f0       	breq	.+8      	; 0x1cfc <vfprintf+0x25a>
    1cf4:	88 37       	cpi	r24, 0x78	; 120
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <vfprintf+0x258>
    1cf8:	a8 c0       	rjmp	.+336    	; 0x1e4a <vfprintf+0x3a8>
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <vfprintf+0x25c>
    1cfc:	10 61       	ori	r17, 0x10	; 16
    1cfe:	14 ff       	sbrs	r17, 4
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <vfprintf+0x272>
    1d02:	14 60       	ori	r17, 0x04	; 4
    1d04:	07 c0       	rjmp	.+14     	; 0x1d14 <vfprintf+0x272>
    1d06:	14 ff       	sbrs	r17, 4
    1d08:	08 c0       	rjmp	.+16     	; 0x1d1a <vfprintf+0x278>
    1d0a:	16 60       	ori	r17, 0x06	; 6
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <vfprintf+0x278>
    1d0e:	28 e0       	ldi	r18, 0x08	; 8
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	05 c0       	rjmp	.+10     	; 0x1d1e <vfprintf+0x27c>
    1d14:	20 e1       	ldi	r18, 0x10	; 16
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfprintf+0x27c>
    1d1a:	20 e1       	ldi	r18, 0x10	; 16
    1d1c:	32 e0       	ldi	r19, 0x02	; 2
    1d1e:	f5 01       	movw	r30, r10
    1d20:	17 ff       	sbrs	r17, 7
    1d22:	07 c0       	rjmp	.+14     	; 0x1d32 <vfprintf+0x290>
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	44 e0       	ldi	r20, 0x04	; 4
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	06 c0       	rjmp	.+12     	; 0x1d3e <vfprintf+0x29c>
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	42 e0       	ldi	r20, 0x02	; 2
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	a4 0e       	add	r10, r20
    1d40:	b5 1e       	adc	r11, r21
    1d42:	a2 01       	movw	r20, r4
    1d44:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__ultoa_invert>
    1d48:	d8 2e       	mov	r13, r24
    1d4a:	d4 18       	sub	r13, r4
    1d4c:	01 2f       	mov	r16, r17
    1d4e:	0f 77       	andi	r16, 0x7F	; 127
    1d50:	06 ff       	sbrs	r16, 6
    1d52:	09 c0       	rjmp	.+18     	; 0x1d66 <vfprintf+0x2c4>
    1d54:	0e 7f       	andi	r16, 0xFE	; 254
    1d56:	df 14       	cp	r13, r15
    1d58:	30 f4       	brcc	.+12     	; 0x1d66 <vfprintf+0x2c4>
    1d5a:	04 ff       	sbrs	r16, 4
    1d5c:	06 c0       	rjmp	.+12     	; 0x1d6a <vfprintf+0x2c8>
    1d5e:	02 fd       	sbrc	r16, 2
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <vfprintf+0x2c8>
    1d62:	0f 7e       	andi	r16, 0xEF	; 239
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <vfprintf+0x2c8>
    1d66:	1d 2d       	mov	r17, r13
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <vfprintf+0x2ca>
    1d6a:	1f 2d       	mov	r17, r15
    1d6c:	80 2f       	mov	r24, r16
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	04 ff       	sbrs	r16, 4
    1d72:	0c c0       	rjmp	.+24     	; 0x1d8c <vfprintf+0x2ea>
    1d74:	fe 01       	movw	r30, r28
    1d76:	ed 0d       	add	r30, r13
    1d78:	f1 1d       	adc	r31, r1
    1d7a:	20 81       	ld	r18, Z
    1d7c:	20 33       	cpi	r18, 0x30	; 48
    1d7e:	11 f4       	brne	.+4      	; 0x1d84 <vfprintf+0x2e2>
    1d80:	09 7e       	andi	r16, 0xE9	; 233
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <vfprintf+0x2f4>
    1d84:	02 ff       	sbrs	r16, 2
    1d86:	06 c0       	rjmp	.+12     	; 0x1d94 <vfprintf+0x2f2>
    1d88:	1e 5f       	subi	r17, 0xFE	; 254
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <vfprintf+0x2f4>
    1d8c:	86 78       	andi	r24, 0x86	; 134
    1d8e:	90 70       	andi	r25, 0x00	; 0
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <vfprintf+0x2f4>
    1d94:	1f 5f       	subi	r17, 0xFF	; 255
    1d96:	80 2e       	mov	r8, r16
    1d98:	99 24       	eor	r9, r9
    1d9a:	03 fd       	sbrc	r16, 3
    1d9c:	12 c0       	rjmp	.+36     	; 0x1dc2 <vfprintf+0x320>
    1d9e:	00 ff       	sbrs	r16, 0
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <vfprintf+0x31a>
    1da2:	fd 2c       	mov	r15, r13
    1da4:	1e 15       	cp	r17, r14
    1da6:	50 f4       	brcc	.+20     	; 0x1dbc <vfprintf+0x31a>
    1da8:	fe 0c       	add	r15, r14
    1daa:	f1 1a       	sub	r15, r17
    1dac:	1e 2d       	mov	r17, r14
    1dae:	06 c0       	rjmp	.+12     	; 0x1dbc <vfprintf+0x31a>
    1db0:	80 e2       	ldi	r24, 0x20	; 32
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	b3 01       	movw	r22, r6
    1db6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1dba:	1f 5f       	subi	r17, 0xFF	; 255
    1dbc:	1e 15       	cp	r17, r14
    1dbe:	c0 f3       	brcs	.-16     	; 0x1db0 <vfprintf+0x30e>
    1dc0:	04 c0       	rjmp	.+8      	; 0x1dca <vfprintf+0x328>
    1dc2:	1e 15       	cp	r17, r14
    1dc4:	10 f4       	brcc	.+4      	; 0x1dca <vfprintf+0x328>
    1dc6:	e1 1a       	sub	r14, r17
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <vfprintf+0x32a>
    1dca:	ee 24       	eor	r14, r14
    1dcc:	84 fe       	sbrs	r8, 4
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <vfprintf+0x34c>
    1dd0:	80 e3       	ldi	r24, 0x30	; 48
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	b3 01       	movw	r22, r6
    1dd6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1dda:	82 fe       	sbrs	r8, 2
    1ddc:	1f c0       	rjmp	.+62     	; 0x1e1c <vfprintf+0x37a>
    1dde:	81 fe       	sbrs	r8, 1
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <vfprintf+0x346>
    1de2:	88 e5       	ldi	r24, 0x58	; 88
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	10 c0       	rjmp	.+32     	; 0x1e08 <vfprintf+0x366>
    1de8:	88 e7       	ldi	r24, 0x78	; 120
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0d c0       	rjmp	.+26     	; 0x1e08 <vfprintf+0x366>
    1dee:	c4 01       	movw	r24, r8
    1df0:	86 78       	andi	r24, 0x86	; 134
    1df2:	90 70       	andi	r25, 0x00	; 0
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	91 f0       	breq	.+36     	; 0x1e1c <vfprintf+0x37a>
    1df8:	81 fc       	sbrc	r8, 1
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <vfprintf+0x35e>
    1dfc:	80 e2       	ldi	r24, 0x20	; 32
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <vfprintf+0x360>
    1e00:	8b e2       	ldi	r24, 0x2B	; 43
    1e02:	07 fd       	sbrc	r16, 7
    1e04:	8d e2       	ldi	r24, 0x2D	; 45
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	b3 01       	movw	r22, r6
    1e0a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <vfprintf+0x37a>
    1e10:	80 e3       	ldi	r24, 0x30	; 48
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	b3 01       	movw	r22, r6
    1e16:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1e1a:	fa 94       	dec	r15
    1e1c:	df 14       	cp	r13, r15
    1e1e:	c0 f3       	brcs	.-16     	; 0x1e10 <vfprintf+0x36e>
    1e20:	da 94       	dec	r13
    1e22:	f2 01       	movw	r30, r4
    1e24:	ed 0d       	add	r30, r13
    1e26:	f1 1d       	adc	r31, r1
    1e28:	80 81       	ld	r24, Z
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	b3 01       	movw	r22, r6
    1e2e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1e32:	dd 20       	and	r13, r13
    1e34:	a9 f7       	brne	.-22     	; 0x1e20 <vfprintf+0x37e>
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0x3a2>
    1e38:	80 e2       	ldi	r24, 0x20	; 32
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	b3 01       	movw	r22, r6
    1e3e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <fputc>
    1e42:	ea 94       	dec	r14
    1e44:	ee 20       	and	r14, r14
    1e46:	c1 f7       	brne	.-16     	; 0x1e38 <vfprintf+0x396>
    1e48:	40 ce       	rjmp	.-896    	; 0x1aca <vfprintf+0x28>
    1e4a:	f3 01       	movw	r30, r6
    1e4c:	86 81       	ldd	r24, Z+6	; 0x06
    1e4e:	97 81       	ldd	r25, Z+7	; 0x07
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <vfprintf+0x3b4>
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	2d 96       	adiw	r28, 0x0d	; 13
    1e58:	e2 e1       	ldi	r30, 0x12	; 18
    1e5a:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__epilogue_restores__>

00001e5e <strnlen_P>:
    1e5e:	fc 01       	movw	r30, r24
    1e60:	05 90       	lpm	r0, Z+
    1e62:	61 50       	subi	r22, 0x01	; 1
    1e64:	70 40       	sbci	r23, 0x00	; 0
    1e66:	01 10       	cpse	r0, r1
    1e68:	d8 f7       	brcc	.-10     	; 0x1e60 <strnlen_P+0x2>
    1e6a:	80 95       	com	r24
    1e6c:	90 95       	com	r25
    1e6e:	8e 0f       	add	r24, r30
    1e70:	9f 1f       	adc	r25, r31
    1e72:	08 95       	ret

00001e74 <strnlen>:
    1e74:	fc 01       	movw	r30, r24
    1e76:	61 50       	subi	r22, 0x01	; 1
    1e78:	70 40       	sbci	r23, 0x00	; 0
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	01 10       	cpse	r0, r1
    1e7e:	d8 f7       	brcc	.-10     	; 0x1e76 <strnlen+0x2>
    1e80:	80 95       	com	r24
    1e82:	90 95       	com	r25
    1e84:	8e 0f       	add	r24, r30
    1e86:	9f 1f       	adc	r25, r31
    1e88:	08 95       	ret

00001e8a <fputc>:
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	8c 01       	movw	r16, r24
    1e94:	eb 01       	movw	r28, r22
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	81 ff       	sbrs	r24, 1
    1e9a:	1b c0       	rjmp	.+54     	; 0x1ed2 <fputc+0x48>
    1e9c:	82 ff       	sbrs	r24, 2
    1e9e:	0d c0       	rjmp	.+26     	; 0x1eba <fputc+0x30>
    1ea0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	28 17       	cp	r18, r24
    1eaa:	39 07       	cpc	r19, r25
    1eac:	64 f4       	brge	.+24     	; 0x1ec6 <fputc+0x3c>
    1eae:	e8 81       	ld	r30, Y
    1eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb2:	01 93       	st	Z+, r16
    1eb4:	f9 83       	std	Y+1, r31	; 0x01
    1eb6:	e8 83       	st	Y, r30
    1eb8:	06 c0       	rjmp	.+12     	; 0x1ec6 <fputc+0x3c>
    1eba:	e8 85       	ldd	r30, Y+8	; 0x08
    1ebc:	f9 85       	ldd	r31, Y+9	; 0x09
    1ebe:	80 2f       	mov	r24, r16
    1ec0:	09 95       	icall
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <fputc+0x48>
    1ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	9f 83       	std	Y+7, r25	; 0x07
    1ece:	8e 83       	std	Y+6, r24	; 0x06
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <fputc+0x4c>
    1ed2:	0f ef       	ldi	r16, 0xFF	; 255
    1ed4:	1f ef       	ldi	r17, 0xFF	; 255
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <__ultoa_invert>:
    1ee2:	fa 01       	movw	r30, r20
    1ee4:	aa 27       	eor	r26, r26
    1ee6:	28 30       	cpi	r18, 0x08	; 8
    1ee8:	51 f1       	breq	.+84     	; 0x1f3e <__ultoa_invert+0x5c>
    1eea:	20 31       	cpi	r18, 0x10	; 16
    1eec:	81 f1       	breq	.+96     	; 0x1f4e <__ultoa_invert+0x6c>
    1eee:	e8 94       	clt
    1ef0:	6f 93       	push	r22
    1ef2:	6e 7f       	andi	r22, 0xFE	; 254
    1ef4:	6e 5f       	subi	r22, 0xFE	; 254
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	af 4f       	sbci	r26, 0xFF	; 255
    1efe:	b1 e0       	ldi	r27, 0x01	; 1
    1f00:	3e d0       	rcall	.+124    	; 0x1f7e <__ultoa_invert+0x9c>
    1f02:	b4 e0       	ldi	r27, 0x04	; 4
    1f04:	3c d0       	rcall	.+120    	; 0x1f7e <__ultoa_invert+0x9c>
    1f06:	67 0f       	add	r22, r23
    1f08:	78 1f       	adc	r23, r24
    1f0a:	89 1f       	adc	r24, r25
    1f0c:	9a 1f       	adc	r25, r26
    1f0e:	a1 1d       	adc	r26, r1
    1f10:	68 0f       	add	r22, r24
    1f12:	79 1f       	adc	r23, r25
    1f14:	8a 1f       	adc	r24, r26
    1f16:	91 1d       	adc	r25, r1
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	6a 0f       	add	r22, r26
    1f1c:	71 1d       	adc	r23, r1
    1f1e:	81 1d       	adc	r24, r1
    1f20:	91 1d       	adc	r25, r1
    1f22:	a1 1d       	adc	r26, r1
    1f24:	20 d0       	rcall	.+64     	; 0x1f66 <__ultoa_invert+0x84>
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <__ultoa_invert+0x48>
    1f28:	68 94       	set
    1f2a:	3f 91       	pop	r19
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	26 9f       	mul	r18, r22
    1f30:	11 24       	eor	r1, r1
    1f32:	30 19       	sub	r19, r0
    1f34:	30 5d       	subi	r19, 0xD0	; 208
    1f36:	31 93       	st	Z+, r19
    1f38:	de f6       	brtc	.-74     	; 0x1ef0 <__ultoa_invert+0xe>
    1f3a:	cf 01       	movw	r24, r30
    1f3c:	08 95       	ret
    1f3e:	46 2f       	mov	r20, r22
    1f40:	47 70       	andi	r20, 0x07	; 7
    1f42:	40 5d       	subi	r20, 0xD0	; 208
    1f44:	41 93       	st	Z+, r20
    1f46:	b3 e0       	ldi	r27, 0x03	; 3
    1f48:	0f d0       	rcall	.+30     	; 0x1f68 <__ultoa_invert+0x86>
    1f4a:	c9 f7       	brne	.-14     	; 0x1f3e <__ultoa_invert+0x5c>
    1f4c:	f6 cf       	rjmp	.-20     	; 0x1f3a <__ultoa_invert+0x58>
    1f4e:	46 2f       	mov	r20, r22
    1f50:	4f 70       	andi	r20, 0x0F	; 15
    1f52:	40 5d       	subi	r20, 0xD0	; 208
    1f54:	4a 33       	cpi	r20, 0x3A	; 58
    1f56:	18 f0       	brcs	.+6      	; 0x1f5e <__ultoa_invert+0x7c>
    1f58:	49 5d       	subi	r20, 0xD9	; 217
    1f5a:	31 fd       	sbrc	r19, 1
    1f5c:	40 52       	subi	r20, 0x20	; 32
    1f5e:	41 93       	st	Z+, r20
    1f60:	02 d0       	rcall	.+4      	; 0x1f66 <__ultoa_invert+0x84>
    1f62:	a9 f7       	brne	.-22     	; 0x1f4e <__ultoa_invert+0x6c>
    1f64:	ea cf       	rjmp	.-44     	; 0x1f3a <__ultoa_invert+0x58>
    1f66:	b4 e0       	ldi	r27, 0x04	; 4
    1f68:	a6 95       	lsr	r26
    1f6a:	97 95       	ror	r25
    1f6c:	87 95       	ror	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	ba 95       	dec	r27
    1f74:	c9 f7       	brne	.-14     	; 0x1f68 <__ultoa_invert+0x86>
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	61 05       	cpc	r22, r1
    1f7a:	71 05       	cpc	r23, r1
    1f7c:	08 95       	ret
    1f7e:	9b 01       	movw	r18, r22
    1f80:	ac 01       	movw	r20, r24
    1f82:	0a 2e       	mov	r0, r26
    1f84:	06 94       	lsr	r0
    1f86:	57 95       	ror	r21
    1f88:	47 95       	ror	r20
    1f8a:	37 95       	ror	r19
    1f8c:	27 95       	ror	r18
    1f8e:	ba 95       	dec	r27
    1f90:	c9 f7       	brne	.-14     	; 0x1f84 <__ultoa_invert+0xa2>
    1f92:	62 0f       	add	r22, r18
    1f94:	73 1f       	adc	r23, r19
    1f96:	84 1f       	adc	r24, r20
    1f98:	95 1f       	adc	r25, r21
    1f9a:	a0 1d       	adc	r26, r0
    1f9c:	08 95       	ret

00001f9e <__prologue_saves__>:
    1f9e:	2f 92       	push	r2
    1fa0:	3f 92       	push	r3
    1fa2:	4f 92       	push	r4
    1fa4:	5f 92       	push	r5
    1fa6:	6f 92       	push	r6
    1fa8:	7f 92       	push	r7
    1faa:	8f 92       	push	r8
    1fac:	9f 92       	push	r9
    1fae:	af 92       	push	r10
    1fb0:	bf 92       	push	r11
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	ca 1b       	sub	r28, r26
    1fc8:	db 0b       	sbc	r29, r27
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	09 94       	ijmp

00001fd6 <__epilogue_restores__>:
    1fd6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fd8:	39 88       	ldd	r3, Y+17	; 0x11
    1fda:	48 88       	ldd	r4, Y+16	; 0x10
    1fdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fde:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fe2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fe4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fe6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fe8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fea:	c8 84       	ldd	r12, Y+8	; 0x08
    1fec:	df 80       	ldd	r13, Y+7	; 0x07
    1fee:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ff4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ff6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ff8:	b9 81       	ldd	r27, Y+1	; 0x01
    1ffa:	ce 0f       	add	r28, r30
    1ffc:	d1 1d       	adc	r29, r1
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	ed 01       	movw	r28, r26
    200a:	08 95       	ret

0000200c <_exit>:
    200c:	f8 94       	cli

0000200e <__stop_program>:
    200e:	ff cf       	rjmp	.-2      	; 0x200e <__stop_program>
