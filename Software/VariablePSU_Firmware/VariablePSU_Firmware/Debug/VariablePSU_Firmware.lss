
VariablePSU_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a8  00000000  00000000  000008b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ab  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000165  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b1  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000015f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 ee       	ldi	r30, 0xE2	; 226
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  b2:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <LCD_InitIO>:
/************************************************************************/
/* Initialises IO ports for the VFD										*/
/************************************************************************/
void LCD_InitIO() {
	
}
  ba:	08 95       	ret

000000bc <LCD_Init>:
/************************************************************************/
/* Initialises the VFD with the specified brightness.					*/
/************************************************************************/
void LCD_Init(uint8_t brightness) {
	
}
  bc:	08 95       	ret

000000be <LCD_ResetLCD>:
/************************************************************************/
/* Resets the VFD's controller.											*/
/************************************************************************/
void LCD_ResetLCD() {
	
}
  be:	08 95       	ret

000000c0 <LCD_ClearScreen>:
/************************************************************************/
/* Clears the entire screen and resets cursor to (0, 0).				*/
/************************************************************************/
void LCD_ClearScreen() {
	LCD_CursorHome(); // reset cursor to (0, 0).
}
  c0:	08 95       	ret

000000c2 <LCD_PutText>:
/************************************************************************/
/* Puts text from RAM to the current cursor position.					*/
/************************************************************************/
void LCD_PutText(char *text) {
	
}
  c2:	08 95       	ret

000000c4 <LCD_PutText_P>:
/************************************************************************/
/* Puts text from PROGMEM to the current cursor position.				*/
/************************************************************************/
void LCD_PutText_P(char *text) {
	
}
  c4:	08 95       	ret

000000c6 <LCD_PutChar>:
/************************************************************************/
/* Puts a character from RAM to a specific on-screen position.			*/
/************************************************************************/
void LCD_PutChar(uint8_t x, uint8_t y, char character) {
	
}
  c6:	08 95       	ret

000000c8 <LCD_PutChar_P>:
/************************************************************************/
/* Puts a character from PROGMEM to a specific on-screen position.		*/
/************************************************************************/
void LCD_PutChar_P(uint8_t x, uint8_t y, char character) {
	
}	
  c8:	08 95       	ret

000000ca <LCD_SetCGRAM>:
/************************************************************************/
/* Sets a specific custom character in CG-RAM from PROGMEM.				*/
/************************************************************************/
void LCD_SetCGRAM(uint8_t character, char *data) {
	
}
  ca:	08 95       	ret

000000cc <LCD_CursorHome>:
/************************************************************************/
/* Resets the cursor to the home position, (0,0).						*/
/************************************************************************/
void LCD_CursorHome() {
	
}
  cc:	08 95       	ret

000000ce <LCD_SetCursorPos>:
/************************************************************************/
/* Sets the cursor's position to the specified X and Y coordinates.		*/
/************************************************************************/
void LCD_SetCursorPos(uint8_t x, uint8_t y) {
	
}
  ce:	08 95       	ret

000000d0 <LCD_SetDisplayState>:
/* Sets the LCD's internal state, such as disable/enable display, cursor*/
/* display, and the cursor blinking.									*/
/************************************************************************/
void LCD_SetDisplayState(uint8_t dispOn, uint8_t cursorOn, uint8_t cursorBlink) {
	
  d0:	08 95       	ret

000000d2 <InitIOPorts>:
    }
}

void InitIOPorts() {
	// Initialise the LCD IO ports
	LCD_InitIO();
  d2:	0e 94 5d 00 	call	0xba	; 0xba <LCD_InitIO>
  d6:	08 95       	ret

000000d8 <main>:
    }
}

void InitIOPorts() {
	// Initialise the LCD IO ports
	LCD_InitIO();
  d8:	0e 94 5d 00 	call	0xba	; 0xba <LCD_InitIO>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x4>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
